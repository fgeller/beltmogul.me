# -*- org-html-postamble-format:(("en" "<div class=\"footer\"><a href=\"/\">belt mogul</a></div>")) -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/normalize.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/styles.css" />
#+HTML_HEAD: <link type="text/css" rel="stylesheet" href="http://fonts.googleapis.com/css?family=Raleway:100,400,600"/>
#+HTML_HEAD: <link type="text/css" rel="stylesheet" href="http://fonts.googleapis.com/css?family=Lato"/>
#+HTML_HEAD: <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
#+HTML_HEAD: <link rel="icon" href="/favicon.ico" type="image/x-icon">
#+OPTIONS: html-link-use-abs-url:nil html-postamble:t html-preamble:nil
#+OPTIONS: html-scripts:nil html-style:nil html5-fancy:nil
#+OPTIONS: toc:0 num:nil ^:{}
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+TITLE: § pipes

I was looking for an operator to make the following easier to read:

#+begin_src scala
  val hans = Person("Herbert", "Fischer", new java.util.Date(now - (23 * MilliSecondsInYear)))
  val withAge = addAge(hans)
  val withAgeAndFullName = addFullName(withAge)
#+end_src

More specifically, the goal is to fill in optional fields based on initially
populated fields. In this case the mandatory fields are =firstName=, =lastName= and
=birthDate= and we derive the =age= and =fullName=:

#+begin_src scala
  val MilliSecondsInYear = 1000 * 60 * 60 * 24 * 365L
  def now = System.currentTimeMillis

  case class Person(
    firstName: String,
    lastName: String,
    birthDate: java.util.Date,
    age: Option[Long] = None,
    fullName: Option[String] = None)

  def addFullName(person: Person) = person.copy(fullName = Some(s"${person.firstName} ${person.lastName}"))
  def addAge(person: Person) = person.copy(age = Some((now - person.birthDate.getTime) / MilliSecondsInYear))
#+end_src

The full example I was looking at had about ten chained function
invocations. Inserting intermediate results led to redundant names as in the
example above and nesting the function invocations felt hard to read as you have
to read the expressions from the inside out:

#+begin_src scala
  val withAgeAndFullName = addFullName(addAge(hans))
#+end_src

My preferred solution was imitating pipes like this:

#+begin_src sh
  ls | sort | uniq -c
#+end_src

So ideally we could write:

#+begin_src scala
  val withAgeAndFullName = hans | addAge | addFullName
#+end_src

But that's the bitwise OR. The alternative I've seen is the following:

#+begin_src scala
  val withAgeAndFullName = hans |> addAge |> addFullName
#+end_src

Rather than including a library for this, we can try this ourselves. First, we
need to pimp objects with our operator:

#+begin_src scala
  class PimpAny[A](any: A) {
    def |>[B](fun: A ⇒ B): B = fun(any)
  }
#+end_src

And add an implicit conversion to make this available:

#+begin_src scala
  implicit def pimpAnyWithPipeOperator[A](any: A) = new PimpAny(any)
#+end_src

We can be even more concise and combine the wrapping class and the
implicit conversion via syntactic sugar in an implicit class:

#+begin_src scala
  implicit class PimpAnyWithPipeOperator[A](any: A) {
    def |>[B](fun: A ⇒ B): B = fun(any)
  }
#+end_src

And we're done -- fun practice to learn about implicit classes. :)

Full REPL example with pipes:

#+begin_src scala
  implicit class PimpAnyWithPipeOperator[A](any: A) {
    def |>[B](fun: A ⇒ B): B = fun(any)
  }

  val MilliSecondsInYear = 1000 * 60 * 60 * 24 * 365L

  case class Person(
    firstName: String,
    lastName: String,
    birthDate: java.util.Date,
    age: Option[Long] = None,
    fullName: Option[String] = None)

  def now = System.currentTimeMillis

  def addFullName(person: Person): Person =
    person.copy(fullName = Some(s"${person.firstName} ${person.lastName}"))

  def addAge(person: Person): Person =
    person.copy(age = Some((now - person.birthDate.getTime) / MilliSecondsInYear))

  val hans = Person("Herbert", "Fischer", new java.util.Date(now - (23 * MilliSecondsInYear)))
  val withAgeAndFullName = hans |> addAge |> addFullName
#+end_src
