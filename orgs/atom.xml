<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>belt mogul</title>
  <link href="http://beltmogul.me/feed/" rel="self" />
  <link href="http://beltmogul.me/" />
  <id>urn:uuid:8875bcdd-f8d6-ce64-0193-6da7c5eb9cd6</id>
  <updated>2014-05-31T02:50:05+0000</updated>

  <entry>
    <title>§ 2014-10-04</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/.html"/>
    <id>urn:uuid:85b78d44-bb7f-5884-a8d3-889a5a53a753</id>
    <updated>2014-10-04T04:36:20+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1 class="title">§ 2014-10-04</h1>
<p>
<a href="http://www.infoq.com/presentations/scaling-gilt">Learnings from Building and Scaling Gilt</a>  growth &amp; innovation.
</p>

<p>
<a href="http://fivethirtyeight.com/features/in-126-years-english-football-has-seen-13475-nil-nil-draws/">In 126 Years, English Football Has Seen 13,475 Nil-Nil Draws</a>  "a bit dull"
</p>

<p>
<a href="http://www.slideshare.net/ktoso/distributed-consensus-aka-what-do-we-eat-for-lunch">Distributed Consensus A.K.A. "What do we eat for lunch?"</a>  paxos by example.
</p>

<p>
<a href="http://nautil.us/blog/the-sound-so-loud-that-it-circled-the-earth-four-times">The Sound So Loud That It Circled the Earth Four Times</a>  wow.
</p>

<p>
<a href="http://www.thoughtworks.com/insights/blog/first-story-every-project">The First Story in Every Project</a>  release early!
</p>

<p>
<a href="http://bouk.co/blog/idiomatic-generics-in-go/">Idiomatic Generics in Go</a>  wow.
</p>

<p>
<a href="http://kazimirmajorinc.com/Documents/Lisp-code-typography/index.html">A few examples of Lisp code typography</a>   history of s-expressions.
</p>

<p>
<a href="http://www.wilfred.me.uk/blog/2014/09/27/the-definitive-guide-to-syntax-highlighting/">The Definitive Guide To Syntax Highlighting</a>  extensive list for emacs.
</p>

<p>
<a href="https://www.youtube.com/watch?v=mq-r20mlGes">Shake Your Silk-Maker: The Dance of the Peacock Spider</a>  o_O
</p>

<p>
<a href="http://www.slate.com/articles/sports/sports_nut/2014/09/sinquefield_cup_one_of_the_most_amazing_feats_in_chess_history_just_happened.single.html">One of the most amazing feats in chess history just happened</a>  interesting read.
</p>

<p>
<a href="http://c9x.me/edit/">Edit - Home Brewed Text Editor</a>  acme + vi
</p>

<p>
<a href="http://bocoup.com/weblog/developer-weeks/">Why hourly time tracking doesn't work for software</a> &#x2026;
</p>

<p>
<a href="https://github.com/killme2008/defun">killme2008/defun</a>  pattern matching on function args via a macro.
</p>

<p>
<a href="http://austinmann.com/trek/iphone-6-plus-camera-review-iceland">iPhone 6 Plus Camera Review: Iceland — Austin Mann</a>  5s vs 6p.
</p>

<p>
<a href="http://vimeo.com/85070976">Aurora Substorm - Real time motion</a>  wow.
</p>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>


  <entry>
    <title>clojure workflow</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/clojure-workflow.html"/>
    <id>urn:uuid:f375a7b8-5e09-3a44-3833-0e41394994a6</id>
    <updated>2014-08-31T09:13:46+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>
This post is a write-up of a short presentation that I gave at the last Clojure
meetup in Auckland. The topic was "Real World Clojure" and I gave a quick demo
of the interactive workflow that I enjoyed for my last side projects. For the
demo, I used <a href="http://clojure-liberator.github.io/liberator/">Liberator</a> to implement basic GET and POST operations against a
<code>/users</code> resource and <a href="http://www.datomic.com/">Datomic</a> for storage. But a fair warning: there isn't much
detail about either one of those two technologies in my post. My focus was on
the interactive workflow that I enjoy so much about LISPs. Both Liberator and
Datomic are well documented, perhaps this post gets you interested in
either.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Setup</h2>
<div class="outline-text-2" id="text-1">
<p>
The setup is just Emacs with <a href="https://github.com/clojure-emacs/cider">clojure-emacs/cider</a> and a <a href="http://leiningen.org/">Leiningen</a> project. No
special configuration on the Emacs side, and I pushed the project template
with tests and a basic Datomic setup to <a href="https://github.com/fgeller/clj-meetup-akl-2014-08">fgeller/clj-meetup-akl-2014-08</a>.
</p>

<p>
Luckily, the project contains basic tests for the HTTP interface:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span>fact <span style="color: #0a74b9;">"listing users"</span>
      <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2ecc71;">[</span>response <span style="color: #2492db;">(</span>handlers <span style="color: #9b59b6;">(</span>request <span style="color: #e67e22;">:get</span> <span style="color: #0a74b9;">"/users"</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">)</span><span style="color: #2ecc71;">]</span>
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:status</span> response<span style="color: #2ecc71;">)</span> =&gt; 200
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:body</span> response<span style="color: #2ecc71;">)</span> =&gt; <span style="color: #0a74b9;">"{}"</span><span style="color: #1abc9c;">)</span>
      <span style="color: #1abc9c;">(</span>cleanup<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span>fact <span style="color: #0a74b9;">"adding and listing a user"</span>
      <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2ecc71;">[</span>request <span style="color: #2492db;">(</span>body <span style="color: #9b59b6;">(</span>content-type <span style="color: #f1c40f;">(</span>request <span style="color: #e67e22;">:post</span> <span style="color: #0a74b9;">"/users"</span><span style="color: #f1c40f;">)</span> <span style="color: #0a74b9;">"application/json"</span><span style="color: #9b59b6;">)</span> <span style="color: #0a74b9;">"{\"nick\": \"hans\"}"</span><span style="color: #2492db;">)</span>
            response <span style="color: #2492db;">(</span>handlers request<span style="color: #2492db;">)</span><span style="color: #2ecc71;">]</span>
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:status</span> response<span style="color: #2ecc71;">)</span> =&gt; 201<span style="color: #1abc9c;">)</span>
      <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2ecc71;">[</span>response <span style="color: #2492db;">(</span>handlers <span style="color: #9b59b6;">(</span>request <span style="color: #e67e22;">:get</span> <span style="color: #0a74b9;">"/users"</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">)</span><span style="color: #2ecc71;">]</span>
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:status</span> response<span style="color: #2ecc71;">)</span> =&gt; 200
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:body</span> response<span style="color: #2ecc71;">)</span> =&gt; <span style="color: #0a74b9;">"{\"1\":{\"nick\":\"hans\"}}"</span><span style="color: #1abc9c;">)</span>
      <span style="color: #1abc9c;">(</span>cleanup<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
The tests are written with <a href="https://github.com/marick/Midje">marick/Midje</a> and outline the basic requirements for
this example. For test feedback, I use <code>eshell</code> and Leiningen to start a REPL
via <code>(compile "lein repl" t)</code> in the project root. Midje includes support for
triggering test runs on file change, so let's load that up:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-12.32.52-PM.png" alt="Midje to run tests" title="Midje to run tests"><img src="../../img/o/Screen-Shot-2014-08-31-at-12.32.52-PM-resized.png" alt="Midje to run tests" title="Midje to run tests" /></a>
</p>
</div>

<p>
Let's take a quick look at the template (<code>src/meetup-users/core.clj</code>). Basic
namespacing and imports to get started:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">ns</span> <span style="color: #2492db;">meetup-users.core</span>
  <span style="color: #1abc9c;">(</span><span style="color: #e67e22;">:require</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">clojure.data.json</span> <span style="color: #e67e22;">:as</span> json<span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">clojure.java.io</span> <span style="color: #e67e22;">:as</span> io<span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">datomic.api</span> <span style="color: #e67e22;">:only</span> <span style="color: #2492db;">[</span>q db<span style="color: #2492db;">]</span> <span style="color: #e67e22;">:as</span> peer<span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">liberator.core</span> <span style="color: #e67e22;">:refer</span> <span style="color: #2492db;">[</span>resource defresource<span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">liberator.dev</span> <span style="color: #e67e22;">:refer</span> <span style="color: #2492db;">[</span>wrap-trace<span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">compojure.core</span> <span style="color: #e67e22;">:refer</span> <span style="color: #2492db;">[</span>defroutes <span style="color: #e67e22;">ANY</span><span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">ring.adapter.jetty</span> <span style="color: #e67e22;">:refer</span> <span style="color: #2492db;">[</span>run-jetty<span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
Define where to find Datomic and how we layout our data:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">def</span> <span style="color: #8e44ad;">datomic-uri</span> <span style="color: #7f8c8d;">"datomic:mem://users"</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">def</span> <span style="color: #8e44ad;">schema-txs</span> <span style="color: #1abc9c;">[</span><span style="color: #2ecc71;">{</span><span style="color: #e67e22;">:db/id</span> #<span style="color: #2492db;">db</span>/id<span style="color: #2492db;">[</span><span style="color: #e67e22;">:db.part/db</span><span style="color: #2492db;">]</span>
                  <span style="color: #e67e22;">:db/ident</span> <span style="color: #e67e22;">:user/id</span>
                  <span style="color: #e67e22;">:db/valueType</span> <span style="color: #e67e22;">:db.type/long</span>
                  <span style="color: #e67e22;">:db/cardinality</span> <span style="color: #e67e22;">:db.cardinality/one</span>
                  <span style="color: #e67e22;">:db.install/_attribute</span> <span style="color: #e67e22;">:db.part/db</span><span style="color: #2ecc71;">}</span>,
                 <span style="color: #2ecc71;">{</span><span style="color: #e67e22;">:db/id</span> #<span style="color: #2492db;">db</span>/id<span style="color: #2492db;">[</span><span style="color: #e67e22;">:db.part/db</span><span style="color: #2492db;">]</span>
                  <span style="color: #e67e22;">:db/ident</span> <span style="color: #e67e22;">:user/nick</span>
                  <span style="color: #e67e22;">:db/valueType</span> <span style="color: #e67e22;">:db.type/string</span>
                  <span style="color: #e67e22;">:db/cardinality</span> <span style="color: #e67e22;">:db.cardinality/one</span>
                  <span style="color: #e67e22;">:db.install/_attribute</span> <span style="color: #e67e22;">:db.part/db</span><span style="color: #2ecc71;">}</span><span style="color: #1abc9c;">]</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
The URI defines that we're not going to persist our data for now and just use
the in-memory storage for a database name <code>users</code>. The <code>schema-txs</code> hold the
transactions to describe user entities. We define two attributes <code>:user/id</code> and
<code>:user/nick</code>, the <code>:user/id</code> will be the external ID, rather than exposing the
internal entity ID. To read more about the structure of these transactions,
you can get started <a href="http://docs.datomic.com/transactions.html">here</a>.
</p>

<p>
Then some wrappers around Datomic's API to make testing a bit easier:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">setup-database</span> <span style="color: #1abc9c;">[]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/create-database datomic-uri<span style="color: #1abc9c;">)</span>
  @<span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/transact <span style="color: #2ecc71;">(</span><span style="color: #2492db;">peer</span>/connect datomic-uri<span style="color: #2ecc71;">)</span> schema-txs<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">delete-database</span> <span style="color: #1abc9c;">[]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/delete-database datomic-uri<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">read-database</span> <span style="color: #1abc9c;">[]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/db <span style="color: #2ecc71;">(</span><span style="color: #2492db;">peer</span>/connect datomic-uri<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span>setup-database<span style="color: #34495e;">)</span>
</pre>
</div>

<p>
This will be the starting point, an empty resource definition:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
The following hooks the resource into the default ring setup and defines a
helper to start up the application using jetty:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defroutes</span> <span style="color: #2492db;">app-routes</span> <span style="color: #1abc9c;">(</span><span style="color: #e67e22;">ANY</span> <span style="color: #0a74b9;">"/users"</span> <span style="color: #2ecc71;">[]</span> users-resource<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">def</span> <span style="color: #8e44ad;">handlers</span> <span style="color: #1abc9c;">(</span>wrap-trace app-routes <span style="color: #e67e22;">:header</span> <span style="color: #e67e22;">:ui</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">boot</span> <span style="color: #1abc9c;">[</span>port<span style="color: #1abc9c;">]</span> <span style="color: #1abc9c;">(</span>run-jetty #'handlers <span style="color: #2ecc71;">{</span><span style="color: #e67e22;">:port</span> port <span style="color: #e67e22;">:join?</span> <span style="color: #e67e22;">false</span><span style="color: #2ecc71;">}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
The <code>wrap-trace</code> middleware is provided by Liberator to make debugging easier,
will see it's output shortly.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Let's get started</h2>
<div class="outline-text-2" id="text-2">
<p>
We can see that all tests fail, and the easiest target seems to be the GET
request. So let's fake that one by returning an empty map:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
But the test results aren't very helpful, we're just getting 500s:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-1.28.17-PM.png" alt="Test failures" title="Test failures"><img src="../../img/o/Screen-Shot-2014-08-31-at-1.28.17-PM-resized.png" alt="Test failures" title="Test failures" /></a>
</p>
</div>

<p>
So let's use Liberator to figure this out. Make sure you started cider via
<code>cider-jack-in</code>, which starts a headless REPL that we can use for evaluating our
code. Evaluating the <code>core.clj</code> buffer via <code>cider-eval-buffer</code> allows for starting
the application on port 2134 via <code>(boot 2134)</code>. Just add the expression in your
buffer and evaluate it via <code>C-x C-e</code> (with point after the expression). Your
minibuffer should show some feedback that the expression was evaluated, in my
case:
</p>

<div class="org-src-container">

<pre class="src src-text">=&gt; #&lt;Server org.eclipse.jetty.server.Server@6df54136&gt;
</pre>
</div>

<p>
Don't forget to remove the expression once you're done, or you'll get warnings
as you tests run in the background.
</p>

<p>
Now create or change to an eshell buffer to query the application. Issue a
request via <code>curl -v localhost:2134/users</code>, this is my result:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-1.43.32-PM.png" alt="Curl output" title="Curl output"><img src="../../img/o/Screen-Shot-2014-08-31-at-1.43.32-PM-resized.png" alt="Curl output" title="Curl output" /></a>
</p>
</div>

<p>
You can see the result of adding the <code>wrap-trace</code> middleware: We're getting
feedback on the decisions that Liberator took for our request. The first check
is whether the service is available, then if the request's method is known and
so on. It seems to find no available media types:
</p>

<div class="org-src-container">

<pre class="src src-text">&lt; X-Liberator-Trace: :decision (:media-type-available? nil)
&lt; X-Liberator-Trace: :handler (:handle-not-acceptable "(default implementation)")
</pre>
</div>

<p>
Before we change that, the following lines give you a link to a visual
representation of the decision graph:
</p>

<div class="org-src-container">

<pre class="src src-text">&lt; Link: &lt;//x-liberator/requests/4eo3a&gt;; rel=x-liberator-trace
&lt; X-Liberator-Trace-Id: 4eo3a
</pre>
</div>

<p>
You can open the request in your browser and follow the colored path to figure
out what happened. In my case the URL is <a href="http://localhost:2134/x-liberator/requests/4eo3a">http://localhost:2134/x-liberator/requests/4eo3a</a>
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-1.53.12-PM.png" alt="Decision graph" title="Decision graph"><img src="../../img/o/Screen-Shot-2014-08-31-at-1.53.12-PM-resized.png" alt="Decision graph" title="Decision graph" /></a>
</p>
</div>

<p>
To make the media type avaible, we just add:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
Now we only have the POST functionality left ;)
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-1.56.01-PM.png" alt="Decision graph." title="Decision graph."><img src="../../img/o/Screen-Shot-2014-08-31-at-1.56.01-PM-resized.png" alt="Decision graph." title="Decision graph." /></a>
</p>
</div>

<p>
Let's give that a try and take a look at the data we're given:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span>println context<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
But the POST request is failing with a 405. If you don't know all status codes
by heart, like me, just evaluate the buffer again (or just the <code>defresource</code>
expression) and issue another request via:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">curl -v -XPOST -H'Content-type: application/json' -d'{<span style="color: #0a74b9;">"nick"</span>: <span style="color: #0a74b9;">"hans"</span>}' localhost:2134/users
</pre>
</div>

<p>
And Liberator will tell us:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-2.05.26-PM.png" alt="Method not allowed." title="Method not allowed."><img src="../../img/o/Screen-Shot-2014-08-31-at-2.05.26-PM-resized.png" alt="Method not allowed." title="Method not allowed." /></a>
</p>
</div>

<p>
So let's allow that method:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span>println context<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
And there we have our request context:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-2.07.28-PM.png" alt="Request context." title="Request context."><img src="../../img/o/Screen-Shot-2014-08-31-at-2.07.28-PM-resized.png" alt="Request context." title="Request context." /></a>
</p>
</div>

<p>
And the POST test succeeds as well! ;) So let's stop faking and actually pass
the data on to Datomic:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">find-all-users</span> <span style="color: #1abc9c;">[</span>database<span style="color: #1abc9c;">]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/q '<span style="color: #2ecc71;">[</span><span style="color: #e67e22;">:find</span> ?u <span style="color: #e67e22;">:where</span> <span style="color: #2492db;">[</span>?u <span style="color: #e67e22;">:user/id</span><span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span> database<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>

<span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">add-user</span> <span style="color: #1abc9c;">[</span>database data<span style="color: #1abc9c;">]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2ecc71;">[</span>new-id <span style="color: #2492db;">(</span>+ 1 <span style="color: #9b59b6;">(</span>count <span style="color: #f1c40f;">(</span>find-all-users database<span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">)</span>
        user-tx <span style="color: #2492db;">{</span><span style="color: #e67e22;">:db/id</span> <span style="color: #9b59b6;">(</span><span style="color: #2492db;">peer</span>/tempid <span style="color: #e67e22;">:db.part/user</span><span style="color: #9b59b6;">)</span> <span style="color: #e67e22;">:user/id</span> new-id <span style="color: #e67e22;">:user/nick</span> <span style="color: #9b59b6;">(</span>get data <span style="color: #0a74b9;">"nick"</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">}</span><span style="color: #2ecc71;">]</span>
    <span style="color: #2ecc71;">(</span>println
     <span style="color: #2492db;">(</span><span style="color: #2492db;">peer</span>/transact <span style="color: #9b59b6;">(</span><span style="color: #2492db;">peer</span>/connect datomic-uri<span style="color: #9b59b6;">)</span> <span style="color: #9b59b6;">[</span>user-tx<span style="color: #9b59b6;">]</span><span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>

<span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>body <span style="color: #9b59b6;">(</span><span style="color: #2492db;">json</span>/read-str <span style="color: #f1c40f;">(</span>slurp <span style="color: #e67e22;">(</span>get-in context <span style="color: #e74c3c;">[</span><span style="color: #e67e22;">:request</span> <span style="color: #e67e22;">:body</span><span style="color: #e74c3c;">]</span><span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                         <span style="color: #2492db;">(</span>add-user <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span> body<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
This snippet skips several iterations where I use cider's backend for
<code>eldoc-mode</code> to get a function's interface in the minibuffer or just use <code>println</code>
on an intermediary result, like the result of the call to <code>peer/transact</code> above:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-2.24.52-PM.png" alt="Transaction result." title="Transaction result."><img src="../../img/o/Screen-Shot-2014-08-31-at-2.24.52-PM-resized.png" alt="Transaction result." title="Transaction result." /></a>
</p>
</div>

<p>
The output shows me that the result is a future that I should probably wait
for. So let's skip ahead once more and try an actual implementation of GET:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>body <span style="color: #9b59b6;">(</span><span style="color: #2492db;">json</span>/read-str <span style="color: #f1c40f;">(</span>slurp <span style="color: #e67e22;">(</span>get-in context <span style="color: #e74c3c;">[</span><span style="color: #e67e22;">:request</span> <span style="color: #e67e22;">:body</span><span style="color: #e74c3c;">]</span><span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                         <span style="color: #2492db;">(</span>add-user <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span> body<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span>
               <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>database <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span>
                     entity-ids <span style="color: #9b59b6;">(</span>find-all-users database<span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                 entity-ids<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
Just returning the <code>entity-ids</code> doesn't work, we're getting 500s. Evaluating the
buffer and firing another GET request via curl will tell us that the check
against <code>multiple-representations?</code> fails and the request ends in a default
implementation of <code>handle-exception</code>:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">&lt; X-Liberator-Trace: :decision (:multiple-representations? false)
&lt; X-Liberator-Trace: :handler (:handle-ok)
&lt; X-Liberator-Trace: :handler (:handle-exception <span style="color: #0a74b9;">"(default implementation)"</span>)
</pre>
</div>

<p>
So let's override that default implementation and take a look at the exception
by printing it:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:handle-exception</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span>println <span style="color: #0a74b9;">"EX:"</span> <span style="color: #2492db;">(</span><span style="color: #e67e22;">:exception</span> context<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>body <span style="color: #9b59b6;">(</span><span style="color: #2492db;">json</span>/read-str <span style="color: #f1c40f;">(</span>slurp <span style="color: #e67e22;">(</span>get-in context <span style="color: #e74c3c;">[</span><span style="color: #e67e22;">:request</span> <span style="color: #e67e22;">:body</span><span style="color: #e74c3c;">]</span><span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                         <span style="color: #2492db;">(</span>add-user <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span> body<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span>
               <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>database <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span>
                     entity-ids <span style="color: #9b59b6;">(</span>find-all-users database<span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                 entity-ids<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
We're getting a:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">EX: #&lt;IllegalArgumentException java.lang.IllegalArgumentException: No implementation of method: :as-response of protocol: #'liberator.representation/Representation found for class: java.util.HashSet&gt;
</pre>
</div>

<p>
So there's no default implementation for serializing a HashSet to JSON. But
that's ok, we only want to return a map, which is supported out of the
box. So let's ignore that for now and built up our result:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:handle-exception</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span>println <span style="color: #0a74b9;">"EX:"</span> <span style="color: #2492db;">(</span><span style="color: #e67e22;">:exception</span> context<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>body <span style="color: #9b59b6;">(</span><span style="color: #2492db;">json</span>/read-str <span style="color: #f1c40f;">(</span>slurp <span style="color: #e67e22;">(</span>get-in context <span style="color: #e74c3c;">[</span><span style="color: #e67e22;">:request</span> <span style="color: #e67e22;">:body</span><span style="color: #e74c3c;">]</span><span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                         <span style="color: #2492db;">(</span>add-user <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span> body<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span>
               <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>database <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span>
                     entity-ids <span style="color: #9b59b6;">(</span>find-all-users database<span style="color: #9b59b6;">)</span>
                     entities <span style="color: #9b59b6;">(</span>map <span style="color: #f1c40f;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #e67e22;">[</span><span style="color: #e74c3c;">[</span>entity-id<span style="color: #e74c3c;">]</span><span style="color: #e67e22;">]</span> <span style="color: #e67e22;">(</span><span style="color: #2492db;">peer</span>/entity database entity-id<span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span>
                                   entity-ids<span style="color: #9b59b6;">)</span>
                     users <span style="color: #9b59b6;">(</span>map <span style="color: #f1c40f;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #e67e22;">[</span>entity<span style="color: #e67e22;">]</span> <span style="color: #e67e22;">{</span><span style="color: #e74c3c;">(</span><span style="color: #e67e22;">:user/id</span> entity<span style="color: #e74c3c;">)</span> <span style="color: #e74c3c;">{</span><span style="color: #e67e22;">:nick</span> <span style="color: #16a085;">(</span><span style="color: #e67e22;">:user/nick</span> entity<span style="color: #16a085;">)</span><span style="color: #e74c3c;">}</span><span style="color: #e67e22;">}</span><span style="color: #f1c40f;">)</span>
                                entities<span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                 <span style="color: #2492db;">(</span>into <span style="color: #9b59b6;">{}</span> users<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
Our query against Datomic returns a vector of vectors, where each nested
vector contains just the entity (identified by the <code>?u</code> in the query). We need
to ask the database for the entity's information and then in the second <code>map</code>,
create a list of maps where a user's external ID identifies a map of the
user's attributes. In this case just the nick. Then we flatten the list into a
single map with <code>into</code> and we're done, as Midje's test runner is happy ;)
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-2.36.37-PM.png" alt="Done." title="Done."><img src="../../img/o/Screen-Shot-2014-08-31-at-2.36.37-PM-resized.png" alt="Done." title="Done." /></a>
</p>
</div>
      </div>
      </div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>typing</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/typing.html"/>
    <id>urn:uuid:3359994b-8579-bfb4-8993-215c98420262</id>
    <updated>2014-08-09T09:57:22+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>
This post is a summary of the tools that I'm fiddling with to tweak my
keyboard layout every now and then. I recently changed from <a href="https://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard">Dvorak</a> to the
less standard <a href="http://www.workmanlayout.com/blog/">Workman Layout</a> with a bit more exotic features that led me to
look into options for implementing and customizing the layout.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">OSX</h2>
<div class="outline-text-2" id="text-1">
<p>
For my Macbook, new layouts can be added by creating a bundle in
<code>~/Library/Keyboard Layouts</code>. There is a Workman bundle with several layout
variations available at <a href="https://github.com/deekayen/workman/tree/master/mac">deekayen/workman</a>. I'm using a variation of <a href="https://github.com/deekayen/workman/tree/master/mac#workman-dead-for-programmers">Workman
Dead</a>, which trades the number of key presses against the distance
traveled. Additionally, you don't have to press a modifier key to get to the
symbols. Symbols that are usually available via the number row, are
accessible on home row after pressing the dead key. Pressing the dead key, in
my case the comma key, will remap several keys. It changes the layout from
normal Workman:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-09-at-7.45.47-AM.png" alt="workman layer." title="workman layer."><img src="../../img/o/Screen-Shot-2014-08-09-at-7.45.47-AM-resized.png" alt="workman layer." title="workman layer." /></a>
</p>
</div>

<p>
to a more symbol focused one:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-09-at-7.45.52-AM.png" alt="symbol layer." title="symbol layer."><img src="../../img/o/Screen-Shot-2014-08-09-at-7.45.52-AM-resized.png" alt="symbol layer." title="symbol layer." /></a>
</p>
</div>

<p>
For example, the key <code>{</code> is accessible by pressing
<code>,s</code> in succession, rather than <code>shift</code> + <code>[</code>, the
key <code>(</code> is <code>,h</code> rather than <code>shift</code> + <code>9</code> and so on.
</p>

<p>
The symbol layer is different from the one included in the bundle at
<a href="https://github.com/deekayen/workman/tree/master/mac">deekayen/workman</a>, more customized to my habits. For example, rather than
splitting parentheses across both hands, I moved them to the left hand. This
means that the right hand can stay on top of the dead key in case I want to
insert a pair. I also traded numbers for more symbols and added <code>~</code> close to
the dead key so that I can type <code>~/</code> conveniently in a rolling motion.
</p>

<p>
The customization is quite straight forward with <a href="http://scripts.sil.org/ukelele">Ukelele</a>. You can open the
main bundle, select the layout you want to modify and enter the symbol layer
to modify just that part of it. Ukelele then updates the file that describes
the layout (<code>*.keylayout</code> in <code>Workman.bundle/Contents/Resources</code>). Much more
convenient than editing the XML by hand :)
</p>

<p>
For some specific key remapping on my Macbook I use <a href="https://pqrs.org/osx/karabiner/">Karabiner</a> and <a href="https://pqrs.org/osx/karabiner/seil.html.en">Seil</a>, rather
than the layout. For example, capslock and return are both mapped to control
when pressed in combination with another key, otherwise to their original
meaning. The combination of Karabiner and Seil allows all sorts of
remappings. For example, in the firmware version I mapped backslash to the
capslock key, as I don't really use capslock. I use Seil to map capslock to
backslash and Karabiner to map backslash to control when pressed in
combination with another key.
</p>

<p>
You can do this for any other key combo: Identify the key's code via:
Karabiner &gt; Misc &amp; Uninstall &gt; Launch EventViewer and use Seil to map the
capslock key to that code. Then add your own configuration to Karabiner,
similar to the following:
</p>

<div class="org-src-container">

<pre class="src src-xml">&lt;?<span style="color: #d98c10;">xml</span> <span style="color: #8e44ad;">version</span>=<span style="color: #0a74b9;">"</span><span style="color: #0a74b9;">1.0</span><span style="color: #0a74b9;">"</span>?&gt;
&lt;<span style="color: #2492db;">root</span>&gt;
  &lt;<span style="color: #2492db;">item</span>&gt;
    &lt;<span style="color: #2492db;">name</span>&gt;Change backslash to left control key.&lt;/<span style="color: #2492db;">name</span>&gt;
    &lt;<span style="color: #2492db;">appendix</span>&gt;(Send an backslash key event when backslash key is pressed alone.)&lt;/<span style="color: #2492db;">appendix</span>&gt;
    &lt;<span style="color: #2492db;">identifier</span>&gt;private.backslash_to_control_escape&lt;/<span style="color: #2492db;">identifier</span>&gt;

    &lt;<span style="color: #2492db;">autogen</span>&gt;
      __KeyOverlaidModifier__
      <span style="color: #95a5a6;">&lt;!--</span><span style="color: #7f8c8d;"> from </span><span style="color: #95a5a6;">--&gt;</span>
      KeyCode::BACKSLASH,
      <span style="color: #95a5a6;">&lt;!--</span><span style="color: #7f8c8d;"> to </span><span style="color: #95a5a6;">--&gt;</span>
      KeyCode::CONTROL_L,
      <span style="color: #95a5a6;">&lt;!--</span><span style="color: #7f8c8d;"> alone </span><span style="color: #95a5a6;">--&gt;</span>
      KeyCode::BACKSLASH,
    &lt;/<span style="color: #2492db;">autogen</span>&gt;
  &lt;/<span style="color: #2492db;">item</span>&gt;
&lt;/<span style="color: #2492db;">root</span>&gt;
</pre>
</div>

<p>
The software support that OSX offers is quite convenient and switching
between layouts is fast, in case someone else needs to type. But there are
some shortcomings:
</p>

<ul class="org-ul">
<li>OSX defaults back to QWERTY when requesting an admin password or when
logging out.
</li>

<li>There are some issues with the symbol layers when using sites like
<a href="http://www.keybr.com/">keybr.com</a> or <a href="https://typing.io/">typing.io</a> for practicing. Not sure where the key presses are
lost or whether they are translated incorrectly.
</li>

<li>When pairing with other developers, I fall back to Qwerty as Workman is
still quite niche and few systems support it out of the box.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">ErgoDox</h2>
<div class="outline-text-2" id="text-2">
<p>
Hardware to the help! I bought an <a href="http://ergodox.org/">ErgoDox</a> via <a href="https://www.massdrop.com/buy/ergodox?s=ergodox">Massdrop</a> last year and this
seemed like the perfect opportunity to learn about its firmware. Compiling my
own firmware version addresses the above issues by "escaping" OSX and
allowing me to just plug in a keyboard with Workman installed. There are
multiple firmware implementations available and I just customized one to fit
my needs. This means custom placement of modifier keys and also adding the
dead key layer. I'm using Massdrop's configurator for the ErgoDox to get a
visual representation of my setup:
</p>


<div class="figure">
<p><a href="../../img/o/ergodox-layer-0.png" alt="ergodox layer 0." title="ergodox layer 0."><img src="../../img/o/ergodox-layer-0-resized.png" alt="ergodox layer 0." title="ergodox layer 0." /></a>
</p>
</div>

<p>
This is just the first layer, the next layer is for symbols and the third is
for a numpad on the right hand near home row, the full configuration is
available <a href="https://www.massdrop.com/ext/ergodox/?referer=92TGQH&amp;hash=cd06f0925f6a7563b492b5fcfb08f7a7">here</a>.
</p>

<p>
The configurator allows you to compile your own firmware version as well, but
currently there is no support for the dead key approach that I'm using. But
luckily <a href="https://github.com/benblazak/ergodox-firmware">benblazak/ergodox-firmware</a> has support for sticky keys, which you can
use to implement the dead key approach. The project is well documented and
it's quite straight-forward to compile your own version on a Mac. The only
external dependency I had to download was the compiler as part of the <a href="http://www.obdev.at/products/crosspack/download.html">AVR
MacPack</a>. Change the layout in <code>src/makefile-options</code> to your target and you're
good to go! Simply issue a <code>make</code> in the <code>src</code> sub-folder and then load the
resulting <code>firmware.hex</code> with a <a href="http://pjrc.com/teensy/loader_mac.html">Teensy Loader</a> onto your ErgoDox.
</p>

<p>
To implement a Workman Dead version, I used the existing <a href="https://github.com/benblazak/ergodox-firmware/blob/master/src/keyboard/ergodox/layout/colemak-jc-mod.c">Colemak layout</a> that
makes use of the sticky keys functionality and adapted the keys to
Workman. The layout definition is split across three function invocations,
where each one looks similar to the following:
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #d98c10;">const</span> uint8_t <span style="color: #2492db;">PROGMEM</span> <span style="color: #8e44ad;">_kb_layout</span>[KB_LAYERS][KB_ROWS][KB_COLUMNS] = {
<span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">LAYER 0</span>
KB_MATRIX_LAYER(
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">unused</span>
    0,
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">left hand</span>
    _esc,       _1, _2, _3, _4, _5, _grave,
    0,          _Q, _D, _R, _W, _B, _tab,
    _backslash, _A, _S, _H, _T, _G,
    _shiftL,    _Z, _X, _M, _C, _V, _guiL,
    0,          0,  0,  0,  _esc,
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">left thumb block</span>
         0, 0,
    0,   0, _altL,
    _bs, 2, _ctrlL,
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">right hand</span>
    _equal, _6, _7, _8, _9,      _0,         _esc,
    _dash,  _J, _F, _U, _P,      _semicolon, 0,
            _Y, _N, _E, _O,      _I,         _quote,
    _guiR,  _K, _L, 1,  _period, _slash,     _shiftR,
            _arrowU, _arrowD, _arrowL, _arrowR, 0,
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">right thumb block</span>
    0,      0,
    _altR,  0,      0,
    _ctrlR, _enter, _space
),
</pre>
</div>

<p>
The above snippet is the definition for the first layer and defines the basic
Workman layout. The <code>0</code>'s indicate an unused key while the ones with an
underscore reference a given key code. For example, <code>_9</code> refers to the key code
that a regular USB keyboard emits when you press the <code>9</code> key (I'm using the
short name, the full name is more descriptive: <code>KEY_9_LeftParenthesis</code>).
</p>

<p>
To implement the symbol layer, I use the comma key as a sticky key, wish
activates a second layer (for one key press). The definition of the sticky
keys is straight-forward: You indicate the layer number on the normal layout
(the <code>1</code> in comma position and <code>2</code> on the left thumb block in the basic layout
above).
</p>

<p>
In addition to the call to <code>_kb_layout</code>, you manage the specific behavior for
press &amp; release by passing mappings to <code>_kb_layout_press</code> and
<code>_kb_layout_release</code>. These mappings are analogous to the one passed to
<code>_kb_layout</code>, but instead of key codes you add references to functions. For the
activation of the symbol layer, you add references to <code>lsticky1</code> or <code>lsticky2</code> in
the press &amp; and release mappings.
</p>

<p>
Not all symbols are accessible without modifiers on a regular keyboard, but
one goal of the dead key approach is to get rid of the modifier. For this to
work, you can supply a modifier-specific function in the press &amp; release
mapping. For example, this is just the layout for the left hand for the
symbol layer:
</p>

<div class="org-src-container">

<pre class="src src-c">0,  0,          0,          0,          0,          0,      0,
0,  _bracketR,  _bracketR,  _0,         _add_kp,    _2,     0,
0,  _bracketL,  _bracketL,  _9,         _equal_kp,  _5,
0,  _comma,     _period,    _backslash, _dash,      _dash,  0,
0,  0,          0,          0,          0,
</pre>
</div>

<p>
To produce <code>{}</code> rather than <code>[]</code> in the third column, the press &amp; release
mappings contain calls to <code>kbfun_shift_press_release</code> (aka <code>sshprre</code>) rather than
the normal <code>kbfun_press_release</code> (aka <code>kprrel</code>):
</p>

<div class="org-src-container">

<pre class="src src-c">ktrans, ktrans,     ktrans,     ktrans,     ktrans,     ktrans,     ktrans,
ktrans, kprrel,     sshprre,    sshprre,    sshprre,    sshprre,    ktrans,
ktrans, kprrel,     sshprre,    sshprre,    sshprre,    sshprre,
ktrans, sshprre,    sshprre,    sshprre,    kprrel,     sshprre,    ktrans,
ktrans, ktrans,     ktrans,     ktrans,     ktrans,
</pre>
</div>

<p>
The tedious bit is to keep the corresponding calls to <code>_kb_layout_press</code> and
<code>_kb_layout_release</code> for each layer in sync. Otherwise you might see modifier
keys that remain pressed for no apparent reason. For example, if the press &amp;
release mappings contain different function references, one to <code>kprrel</code> and the
other to <code>sshprre</code>, then the shift modifier would not get released properly.
Keeping the different invocations in sync is a bit tedious as all information
is passed in a single call where position defines the meaning of a value and
you only get arity compiler warnings. But your favorite editor might be able
to help you with that ;)
</p>

<p>
For reference my full layout is available <a href="https://github.com/fgeller/ergodox-firmware/blob/master/src/keyboard/ergodox/layout/workman-dead-mod.c">here</a>.
</p>
</div>
</div>
</div>
</content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>


  <entry>
    <title>scala pipes</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/pipes.html"/>
    <id>urn:uuid:10e2b7dc-19b6-07d4-e25b-c9407399aa4c</id>
    <updated>2014-06-24T12:20:22+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>
I was looking for an operator to make the following easier to read:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">hans</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Person</span>(<span style="color: #0a74b9;">"Herbert"</span>, <span style="color: #0a74b9;">"Fischer"</span>, <span style="color: #d98c10;">new</span> <span style="color: #2492db;">java</span>.util.<span style="color: #e67e22;">Date</span>(now - (<span style="color: #e67e22;">23</span> * <span style="color: #e67e22;">MilliSecondsInYear</span>)))
<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAge</span> <span style="color: #d98c10;">=</span> addAge(hans)
<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> addFullName(withAge)
</pre>
</div>

<p>
More specifically, the goal is to fill in optional fields based on initially
populated fields. In this case the mandatory fields are <code>firstName</code>, <code>lastName</code> and
<code>birthDate</code> and we derive the <code>age</code> and <code>fullName</code>:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">MilliSecondsInYear</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">1000</span> * <span style="color: #e67e22;">60</span> * <span style="color: #e67e22;">60</span> * <span style="color: #e67e22;">24</span> * <span style="color: #e67e22;">365L</span>
<span style="color: #d98c10;">def</span> <span style="color: #2492db;">now</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">System</span>.currentTimeMillis

<span style="color: #d98c10;">case</span> <span style="color: #d98c10;">class</span> <span style="color: #2492db;">Person</span>(
  firstName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">String</span>,
  lastName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">String</span>,
  birthDate<span style="color: #d98c10;">:</span> <span style="color: #2492db;">java</span>.util.<span style="color: #e67e22;">Date</span>,
  age<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Option</span>[<span style="color: #e67e22;">Long</span>] <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">None</span>,
  fullName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Option</span>[<span style="color: #e67e22;">String</span>] <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">None</span>)

<span style="color: #d98c10;">def</span> <span style="color: #2492db;">addFullName</span>(person<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span>) <span style="color: #d98c10;">=</span> person.copy(fullName <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Some</span>(s<span style="color: #0a74b9;">"${person.firstName} ${person.lastName}"</span>))
<span style="color: #d98c10;">def</span> <span style="color: #2492db;">addAge</span>(person<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span>) <span style="color: #d98c10;">=</span> person.copy(age <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Some</span>((now - person.birthDate.getTime) / <span style="color: #e67e22;">MilliSecondsInYear</span>))
</pre>
</div>

<p>
The full example I was looking at had about ten chained function
invocations. Inserting intermediate results led to redundant names as in the
example above and nesting the function invocations felt hard to read as you have
to read the expressions from the inside out:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> addFullName(addAge(hans))
</pre>
</div>

<p>
My preferred solution was imitating pipes like this:
</p>

<div class="org-src-container">

<pre class="src src-sh">ls | sort | uniq -c
</pre>
</div>

<p>
So ideally we could write:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> hans | addAge | addFullName
</pre>
</div>

<p>
But that's the bitwise OR. The alternative I've seen is the following:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> hans |&gt; addAge |&gt; addFullName
</pre>
</div>

<p>
Rather than including a library for this, we can try this ourselves. First, we
need to pimp objects with our operator:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">class</span> <span style="color: #2492db;">PimpAny</span>[<span style="color: #e67e22;">A</span>](any<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span>) {
  <span style="color: #d98c10;">def</span> <span style="color: #2492db;">|&gt;</span>[<span style="color: #e67e22;">B</span>](fun<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span> <span style="color: #d98c10;">&#8658;</span> <span style="color: #e67e22;">B</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">B</span> <span style="color: #d98c10;">=</span> fun(any)
}
</pre>
</div>

<p>
And add an implicit conversion to make this available:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #16a085;">implicit</span> <span style="color: #d98c10;">def</span> <span style="color: #2492db;">pimpAnyWithPipeOperator</span>[<span style="color: #e67e22;">A</span>](any<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span>) <span style="color: #d98c10;">=</span> <span style="color: #d98c10;">new</span> <span style="color: #2492db;">PimpAny</span>(any)
</pre>
</div>

<p>
We can be even more concise and combine the wrapping class and the
implicit conversion via syntactic sugar in an implicit class:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #16a085;">implicit</span> <span style="color: #d98c10;">class</span> <span style="color: #2492db;">PimpAnyWithPipeOperator</span>[<span style="color: #e67e22;">A</span>](any<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span>) {
  <span style="color: #d98c10;">def</span> <span style="color: #2492db;">|&gt;</span>[<span style="color: #e67e22;">B</span>](fun<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span> <span style="color: #d98c10;">&#8658;</span> <span style="color: #e67e22;">B</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">B</span> <span style="color: #d98c10;">=</span> fun(any)
}
</pre>
</div>

<p>
And we're done &#x2013; fun practice to learn about implicit classes. :)
</p>

<p>
Full REPL example with pipes:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #16a085;">implicit</span> <span style="color: #d98c10;">class</span> <span style="color: #2492db;">PimpAnyWithPipeOperator</span>[<span style="color: #e67e22;">A</span>](any<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span>) {
  <span style="color: #d98c10;">def</span> <span style="color: #2492db;">|&gt;</span>[<span style="color: #e67e22;">B</span>](fun<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span> <span style="color: #d98c10;">&#8658;</span> <span style="color: #e67e22;">B</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">B</span> <span style="color: #d98c10;">=</span> fun(any)
}

<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">MilliSecondsInYear</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">1000</span> * <span style="color: #e67e22;">60</span> * <span style="color: #e67e22;">60</span> * <span style="color: #e67e22;">24</span> * <span style="color: #e67e22;">365L</span>

<span style="color: #d98c10;">case</span> <span style="color: #d98c10;">class</span> <span style="color: #2492db;">Person</span>(
  firstName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">String</span>,
  lastName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">String</span>,
  birthDate<span style="color: #d98c10;">:</span> <span style="color: #2492db;">java</span>.util.<span style="color: #e67e22;">Date</span>,
  age<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Option</span>[<span style="color: #e67e22;">Long</span>] <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">None</span>,
  fullName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Option</span>[<span style="color: #e67e22;">String</span>] <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">None</span>)

<span style="color: #d98c10;">def</span> <span style="color: #2492db;">now</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">System</span>.currentTimeMillis

<span style="color: #d98c10;">def</span> <span style="color: #2492db;">addFullName</span>(person<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span> <span style="color: #d98c10;">=</span>
  person.copy(fullName <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Some</span>(s<span style="color: #0a74b9;">"${person.firstName} ${person.lastName}"</span>))

<span style="color: #d98c10;">def</span> <span style="color: #2492db;">addAge</span>(person<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span> <span style="color: #d98c10;">=</span>
  person.copy(age <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Some</span>((now - person.birthDate.getTime) / <span style="color: #e67e22;">MilliSecondsInYear</span>))

<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">hans</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Person</span>(<span style="color: #0a74b9;">"Herbert"</span>, <span style="color: #0a74b9;">"Fischer"</span>, <span style="color: #d98c10;">new</span> <span style="color: #2492db;">java</span>.util.<span style="color: #e67e22;">Date</span>(now - (<span style="color: #e67e22;">23</span> * <span style="color: #e67e22;">MilliSecondsInYear</span>)))
<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> hans |&gt; addAge |&gt; addFullName
</pre>
</div>

      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

</feed>
