<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>belt mogul</title>
  <link href="http://beltmogul.me/feed/" rel="self" />
  <link href="http://beltmogul.me/" />
  <id>urn:uuid:8875bcdd-f8d6-ce64-0193-6da7c5eb9cd6</id>
  <updated>2015-08-05T13:28:42+1200</updated>

  <entry>
    <title>On Scala's futures</title>
    <link type="text/html" href="http://www.beltmogul.me/2015/futures.html"/>
    <id>urn:uuid:fa8b4f52-9407-5c84-1293-236e1fa07247</id>
    <updated>2015-10-21T23:35:21+1200</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<div><h2><a href="http://beltmogul.me/2015/futures.html">On Scala's futures</a> <span class="date">21-10-2015</span></h2></div>



<div class="figure">
<p><a href="http://www.wikiart.org/en/m-c-escher/liberation" alt="Liberation" title="Liberation"><img src="../../img/a/liberation.jpg" alt="Liberation" title="Liberation" /></a>
</p>
</div>

<p>
This is a write up of a lunch session on Scala's <code>Future</code> and <code>Promise</code>
abstractions. We'll implement parts of these abstractions and gloss over
details like synchronization to focus on the abstractions themselves.
</p>

<p>
You can clone <a href="https://github.com/fgeller/futures.scala">fgeller/futures.scala</a> and follow the examples via tags, but this
write-up should be self-contained as well.
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Background</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
Commonly the JVM runs a single OS process and we use threads for performing
parallel or asynchronous computation. Scala offers thin abstractions wrapping
around such threads called Future and Promise. These abstractions grew out of
<a href="http://docs.scala-lang.org/sips/completed/futures-promises.html">SIP-14</a> which included learnings from <a href="http://akka.io/">akka</a> as well as Scala's own
implementation of <a href="http://docs.scala-lang.org/overviews/core/actors.html">actors</a> that is deprecated by now. Compared to actors a
<code>Future</code> is a thinner abstraction with more emphasis on composability.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Basics</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
Let's look at a simple multi-threaded application in Java:
</p>

<div class="org-src-container">

<pre class="src src-java">  public class Runner {
    public static void main(String[] args) {
      new Thread() {
        public void run() {
          System.out.println("hello, from elsewhere.");
        }
      }.start();
      try { Thread.sleep(1); } catch (InterruptedException ex) {}
      System.out.println("hello, from runner.");
    }
  }
</pre>
</div>


<p>
We create a new <code>Thread</code> object and override the <code>run</code> method to print a simple
greeting. We start this thread right away and briefly block the main thread by
sleeping for one millisecond, before we print a greeting from the main
thread. It prints the following:
</p>

<pre class="example">
hello, from elsewhere.
hello, from runner.
</pre>

<p>
What would this look like in Scala?
</p>

<div class="org-src-container">

<pre class="src src-scala">  new Thread() {
    override def run(): Unit = {
      println("hello, from elsewhere.")
    }
  }.start()
  Thread.sleep(1)
  println("hello, from runner.")
</pre>
</div>


<p>
We drop some of the boilerplate code, but we're doing the same thing as in the
Java example above. It still prints:
</p>

<pre class="example">
hello, from elsewhere.
hello, from runner.
</pre>

<p>
How would we achieve this with futures?
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.concurrent._
  import ExecutionContext.Implicits._
  val f: Future[Unit] =
    Future { println("hello, from elsewhere.") }
  Thread.sleep(1)
  println("hello, from runner.")
</pre>
</div>


<p>
This still prints:
</p>

<pre class="example">
hello, from elsewhere.
hello, from runner.
</pre>

<p>
Some differences to notice when compared to the examples using Java's thread
represenation:
</p>

<ul class="org-ul">
<li>We need to import the desired abstractions from <code>scala.concurrent</code></li>
<li>We import a global execution context, implicitly defining that our futures
should be scheduled on this default thread pool.</li>
<li>The <code>Future</code> is parameterized, identifying the type of the computation that
we perform. In our case <code>println</code> "produces" a <code>Unit</code>.</li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Let's do this ourselves.</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
So let's try to implement this:
</p>

<div class="org-src-container">

<pre class="src src-scala">  class Future[T](value: T)
  object Future {
    def apply[T](v: T): Future[T] = { new Future(v) }
  }
  println("hello, world.")
  val of: Future[Unit] = Future(println("In the future!"))
</pre>
</div>

<p>
We create a class <code>Future</code> that holds a given value and an <code>apply</code> method in its
companion object to construct instances of this class. It prints the
following:
</p>

<pre class="example">
hello, world.
In the future!
</pre>

<p>
Looks good right?
</p>



<div class="figure">
<p><img src="../../img/a/really.jpg" alt="really-meme.jpg" />
</p>
</div>


<p>
Ok, ok, let's check whether it's multi-threaded:
</p>

<div class="org-src-container">

<pre class="src src-scala">  def log(msg: String) = println(s"${Thread.currentThread}: $msg")
  class Future[T](value: T)
  object Future {
    def apply[T](v: T): Future[T] = { new Future(v) }
  }
  log("hello, world.")
  val of: Future[Unit] = Future(log("In the future!"))
</pre>
</div>

<p>
So we wrap the <code>println</code> call and include the current thread. This should tell
us what thread a given <code>println</code> expression is evaluated on. It prints the
following:
</p>

<pre class="example">
Thread[main,5,main]: hello, world.
Thread[main,5,main]: In the future!
</pre>

<p>
So I guess that didn't work. Let's actually add multi-threading:
</p>

<div class="org-src-container">

<pre class="src src-scala">  def log(msg: String) = println(s"${Thread.currentThread}: $msg")
  class Future[T]() { var value: T = _ }
  object Future {
    def apply[T](v: T): Future[T] = {
      val result = new Future[T]()
      val thread = new Thread() {
        override def run(): Unit = { result.value = v }
      }
      thread.start()
      result
    }
  }
  log("hello, world.")
  val of: Future[Unit] = Future(log("In the future!"))
</pre>
</div>



<p>
So we create a new <code>Thread</code> instance in our <code>apply</code> method and change the
container class to allow us to assign the value from the outside by making the
instance variable re-assignable. That should do it, right? Let's see what it
prints:
</p>

<pre class="example">
Thread[main,5,main]: hello, world.
Thread[main,5,main]: In the future!
</pre>

<p>
Well, not really. What's missing? Scala is an eager or <a href="https://mitpress.mit.edu/sicp/full-text/sicp/book/node85.html">applicative order</a>
language. This means that it evaluates the arguments to a function call before
evaluating the function itself. This means that we evaluate the call to <code>log</code>
before we even start the evaluation of the <code>apply</code> method, let alone start a new
thread.
</p>

<p>
What to do? Compiler magic to the rescue!
</p>

<div class="org-src-container">

<pre class="src src-scala">  def log(msg: String) = println(s"${Thread.currentThread}: $msg")
  class Future[T]() { var value: T = _ }
  object Future {
    def apply[T](v: &#8658; T): Future[T] = {
      val result = new Future[T]()
      val thread = new Thread() {
        override def run(): Unit = { result.value = v }
      }
      thread.start()
      result
    }
  }
  log("hello, world.")
  val of: Future[Unit] = Future(log("In the future!"))
</pre>
</div>

<p>
The only thing that changes in the above example is the following line:
</p>

<div class="org-src-container">

<pre class="src src-scala">    def apply[T](v: &#8658; T): Future[T] = {
</pre>
</div>

<p>
We added a ⇒ to the type which means that this argument will only be
evaluated when needed. We could do this ourselves by wrapping the argument in
a closure like this:
</p>

<div class="org-src-container">

<pre class="src src-scala">  val of: Future[Unit] = Future.apply({ () &#8658; log("In the future!")})
</pre>
</div>

<p>
This would delay the execution of the call to <code>log</code> until the closure is
actually evaluated. The ⇒ type annotation is essentially syntactic sugar for
wrapping function arguments in closures.
</p>

<p>
So did that actually work? This is what it prints:
</p>

<pre class="example">
Thread[main,5,main]: hello, world.
Thread[Thread-0,5,main]: In the future!
</pre>

<p>
Looks like we're successfully printing from different threads now!
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">Futures and Promises</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
Let's step back and look at what the <a href="http://docs.scala-lang.org/sips/completed/futures-promises.html">SIP</a> says about a future value:
</p>

<ul class="org-ul">
<li>A future is an abstraction which represents a value which may become
available at some point.</li>

<li>A Future object either holds a result of a computation or an exception in
the case that the computation failed.</li>

<li>An important property of a future is that it is in effect immutable - it can
never be written to or failed by the holder of the Future object.</li>
</ul>

<p>
Our implementation seems to work for the first part, but we're missing the
second and third statements. Let's first focus on the second statement:
</p>

<p>
We currently neglect the fact that a computation might fail and only
implicitly encode that a computation hasn't finished through the <code>null</code> value
that we use to initialize the container. Let's use <code>Option[A]</code> to encode a
possibly unfinished computation and <code>Try[B]</code> to encode a possibly failed or
succeeded computation:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.util._
  def log(msg: String) = println(s"${Thread.currentThread}: $msg")
  class Future[T]() { var value = Option.empty[Try[T]] }
  object Future {
    def apply[T](v: &#8658; T): Future[T] = {
      val result = new Future[T]()
      val thread = new Thread() {
        override def run(): Unit = { result.value = Some(Try(v)) }
      }
      thread.start()
      result
    }
  }
  log("hello, world.")
  val of: Future[Unit] = Future(log("In the future!"))
</pre>
</div>

<p>
The type of the contained value changes to <code>Option[Try[T]]</code> and we wrap the
evaluation of a computation in a <code>Try</code> to capture possible failures.
</p>

<p>
That should tick two boxes. How about that third statement:
</p>

<ul class="org-ul">
<li>An important property of a future is that it is in effect immutable - it can
never be written to or failed by the holder of the Future object.</li>
</ul>

<p>
That's certainly not true - we use a <code>var</code> to enable setting the container
from a different thread. That's where promises come in. If we continue reading
the SIP we get to this part:
</p>

<ul class="org-ul">
<li>While futures are defined as a type of read-only placeholder object created
for a result which doesn’t yet exist, a promise can be thought of as a
writeable, single-assignment container, which completes a future.</li>
</ul>

<p>
Turns out we were writing a promise all along! (Ignoring the single-assignment
part for now). But still, how do these immutable futures work? The REPL offers
help:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.concurrent._
  import ExecutionContext.Implicits.global
  println(s"Our future is ${Future(42)}")
</pre>
</div>

<p>
This prints the following:
</p>

<pre class="example">
Our future is scala.concurrent.impl.Promise$DefaultPromise@87aac27
</pre>

<p>
So a future is a promise, is a future, is a promise?
Can we do this then?
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.concurrent._
  import ExecutionContext.Implicits.global
  println(s"Our future is ${Future(42): Promise[Int]}")
</pre>
</div>

<p>
The typer doesn't like that:
</p>

<pre class="example">
found   : scala.concurrent.Future[Int]
required: scala.concurrent.Promise[Int]
</pre>

<p>
How do we get a <code>Future</code> from a <code>Promise</code> in Scala? We generally call <code>future</code> on
the promise - so how is that <a href="https://github.com/scala/scala/blob/27da46343cd545534819300235bc64ab74958c92/src/library/scala/concurrent/impl/Promise.scala#L20">implemented</a>?
</p>

<div class="org-src-container">

<pre class="src src-scala">  private[concurrent] trait Promise[T]
      extends scala.concurrent.Promise[T] with scala.concurrent.Future[T] {
    def future: this.type = this
  }
</pre>
</div>

<p>
So a promise is a promise is a future! We're simply restricting access to the
mutability to the <code>Promise</code> type and the immutable parts to the <code>Future</code>. That
looks doable, let's try!
</p>

<p>
First, let's switch everything we have so far to a Promise:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.util._
  def log(msg: String) = println(s"${Thread.currentThread}: $msg")
  class Promise[T]() { var value = Option.empty[Try[T]] }
  object Promise {
    def apply[T](v: &#8658; T): Promise[T] = {
      val result = new Promise[T]()
      val thread = new Thread() {
        override def run(): Unit = { result.value = Some(Try(v)) }
      }
      thread.start()
      result
    }
  }
  log("hello, world.")
  val of: Promise[Unit] = Promise(log("In the future!"))
</pre>
</div>

<p>
This still prints:
</p>

<pre class="example">
Thread[main,5,main]: hello, world.
Thread[Thread-3,5,main]: In the future!
</pre>

<p>
Let's try the rest in parts. First we wrap our implementation in a namespace
that we can restrict access to &#x2013; I'll use objects in this example, but
packages would work the same:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.util._
  object our {
    trait Promise[T] { def complete(value: Try[T]): Promise[T] }
    trait Future[T] {}
  }
</pre>
</div>

<p>
We define traits to represent our two abstractions to the outside and add a
<code>complete</code> method on promises that allows an external caller to write a value to
the container. Let's add the implementation of <code>apply</code> using this <code>complete</code>
method:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.util._
  object our {
    trait Promise[T] { def complete(value: Try[T]): Promise[T] }
    trait Future[T] {}
    object Future {
      def apply[T](v: &#8658; T): Future[T] = {
        val result = new impl.Promise[T]()
        val thread = new Thread() {
          override def run(): Unit = { result.complete(Try(v)) }
        }
        thread.start()
        result.future
      }
    }
  }
</pre>
</div>

<p>
And then we add the implementation of our promise:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.util._
  object our {
    trait Promise[T] { def complete(value: Try[T]): Promise[T] }
    trait Future[T] {}
    object Future {
      // left out for brevity
    }
    object impl {
      private[our] class Promise[T] extends our.Promise[T] with our.Future[T] {
        def future: Future[T] = this
        private var value = Option.empty[Try[T]]
        def complete(v: Try[T]): Promise[T] = {
          if (this.value.isDefined)
            throw new IllegalStateException("Can only complete a promise once.")

          this.value = Some(v)
          this
        }
      }
    }
  }
</pre>
</div>

<p>
We provide an accessor to view the underlying promise as a future and protect
against completing the promise multiple times.
</p>

<p>
And the full example:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.util._
  object our {
    trait Promise[T] { def complete(value: Try[T]): Promise[T] }
    trait Future[T] {}
    object Future {
      def apply[T](v: &#8658; T): Future[T] = {
        val result = new impl.Promise[T]()
        val thread = new Thread() {
          override def run(): Unit = { result.complete(Try(v)) }
        }
        thread.start()
        result.future
      }
    }
    object impl {
      private[our] class Promise[T] extends our.Promise[T] with our.Future[T] {
        def future: Future[T] = this
        private var value = Option.empty[Try[T]]
        def complete(v: Try[T]): Promise[T] = {
          if (this.value.isDefined)
            throw new IllegalStateException("Can only complete a promise once.")

          this.value = Some(v)
          this
        }
      }
    }
  }
  import our._
  def log(msg: String) = println(s"${Thread.currentThread}: $msg")
  log("hello, world")
  val of: Future[Unit] = Future(log("In the future!"))
</pre>
</div>

<p>
This will print the following:
</p>

<pre class="example">
Thread[main,5,main]: hello, world
Thread[Thread-0,5,main]: In the future!
</pre>

<p>
Now let's provide access to the value of a future. Our first attempt is to
install a callback that will be evaluated when the promise is completed. We
add the ability to add a callback on the future:
</p>

<div class="org-src-container">

<pre class="src src-scala">  trait Future[T] { def onComplete(fun: Try[T] &#8658; Unit): Unit }
</pre>
</div>

<p>
The callback will receive a <code>Try[T]</code> which encodes the result of the computation
and we'll ignore the result of the provided closure. To our implementation we
add a Set[Try[T] ⇒ Unit] to keep track of the installed callbacks. We'll use
a set because the order of these callbacks is <a href="http://www.scala-lang.org/api/2.11.7/index.html#scala.concurrent.Future@onComplete%5BU%5D(f:scala.util.Try%5BT%5D=%3EU)(implicitexecutor:scala.concurrent.ExecutionContext):Unit">not guaranteed</a>.
</p>

<div class="org-src-container">

<pre class="src src-scala">  private[our] class Promise[T] extends Future[T] {
    def future: Future[T] = this
    private var value = Option.empty[Try[T]]
    private var onCompletes = mutable.Set.empty[Try[T] &#8658; Unit]
    def onComplete(fun: Try[T] &#8658; Unit): Unit = {
      this.value match {
        case Some(v) &#8658; fun(v)
        case None    &#8658; onCompletes += fun
      }
    }
  }
</pre>
</div>

<p>
And then we need to make sure that we execute the installed callbacks on
completion of our promise:
</p>

<div class="org-src-container">

<pre class="src src-scala">  private[our] class Promise[T] extends Future[T] {
    def complete(v: Try[T]): Promise[T] = {
      if (this.value.isDefined)
        throw new IllegalStateException("Can only complete a promise once.")

      this.value = Some(v)
      this.onCompletes.foreach(_(v))
      this
    }
  }
</pre>
</div>

<p>
Here's the full example:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.util._
  import scala.collection.mutable
  object our {
    trait Promise[T] { def complete(value: Try[T]): Promise[T] }
    trait Future[T] { def onComplete(fun: Try[T] &#8658; Unit): Unit }
    object Future {
      def apply[T](v: &#8658; T): Future[T] = {
        val result = new impl.Promise[T]()
        val thread = new Thread() {
          override def run(): Unit = { result.complete(Try(v)) }
        }
        thread.start()
        result.future
      }
    }
    object impl {
      private[our] class Promise[T] extends Future[T] {
        def future: Future[T] = this
        private var value = Option.empty[Try[T]]
        private var onCompletes = mutable.Set.empty[Try[T] &#8658; Unit]
        def onComplete(fun: Try[T] &#8658; Unit): Unit = {
          this.value match {
            case Some(v) &#8658; fun(v)
            case None    &#8658; onCompletes += fun
          }
        }
        def complete(v: Try[T]): Promise[T] = {
          if (this.value.isDefined)
            throw new IllegalStateException("Can only complete a promise once.")

          this.value = Some(v)
          this.onCompletes.foreach(_(v))
          this
        }
      }
    }
  }
  import our._
  def log(msg: String) = println(s"${Thread.currentThread}: $msg")
  val of: Future[Unit] = Future(log("In the future!"))
  of.onComplete { value &#8658; log(s"Our future: ${value}") }
</pre>
</div>

<p>
It prints the following:
</p>

<pre class="example">
Thread[Thread-0,5,main]: In the future!
Thread[Thread-0,5,main]: Our future: Success(())
</pre>

<p>
We started out by claiming that Scala's abstractions over Threads have an
emphasis on composability and our current API doesn't allow for that. We throw
away the result of installed callbacks and don't allow chaining when we want
to install callbacks. Let's add a <code>map</code> combinator that enables composability
through chaining of defered computations. The only required change is the
implementation of the combinator on <code>Future</code>:
</p>

<div class="org-src-container">

<pre class="src src-scala">  object our {
    trait Future[T] {
      def onComplete(fun: Try[T] &#8658; Unit): Unit
      def map[U](fun: T &#8658; U): Future[U] = {
        val result = new impl.Promise[U]()
        this.onComplete {
          case Success(v)  &#8658; result.complete(Try(fun(v)))
          case Failure(th) &#8658; log("uhoh... not evaluating fun")
        }
        result.future
      }
    }
  }
</pre>
</div>

<p>
The combinator creates a new promise and returns the corresponding future. It
also installs a callback on the future that it is invoked on. In the callback
we complete the new promise with the application of the result of the first
future to the closure given to <code>map</code>. So we "thread" the result from the first
future through to the next future, applying the closure given to <code>map</code> along the
way. This allows for ordered chaining of closures like we do in this modified
version of our example:
</p>

<div class="org-src-container">

<pre class="src src-scala">  import scala.util._
  import scala.collection.mutable
  object our {
    trait Promise[T] { def complete(value: Try[T]): Promise[T] }
    trait Future[T] {
      def onComplete(fun: Try[T] &#8658; Unit): Unit
      def map[U](fun: T &#8658; U): Future[U] = {
        val result = new impl.Promise[U]()
        this.onComplete {
          case Success(v)  &#8658; result.complete(Try(fun(v)))
          case Failure(th) &#8658; log("uhoh... not evaluating fun")
        }
        result.future
      }
    }
    object Future {
      def apply[T](v: &#8658; T): Future[T] = {
        val result = new impl.Promise[T]()
        val thread = new Thread() {
          override def run(): Unit = { result.complete(Try(v)) }
        }
        thread.start()
        result.future
      }
    }
    object impl {
      private[our] class Promise[T] extends Future[T] {
        def future: Future[T] = this
        private var value = Option.empty[Try[T]]
        private var onCompletes = mutable.Set.empty[Try[T] &#8658; Unit]
        def onComplete(fun: Try[T] &#8658; Unit): Unit = {
          this.value match {
            case Some(v) &#8658; fun(v)
            case None    &#8658; onCompletes += fun
          }
        }
        def complete(v: Try[T]): Promise[T] = {
          if (this.value.isDefined)
            throw new IllegalStateException("Can only complete a promise once.")

          this.value = Some(v)
          this.onCompletes.foreach(_(v))
          this
        }
      }
    }
  }
  import our._
  def log(msg: String) = println(s"${Thread.currentThread}: $msg")
  Future(23).map(_ + 23).map(_.toString).map(log)
</pre>
</div>

<p>
Which simply prints:
</p>

<pre class="example">
Thread[Thread-0,5,main]: 46
</pre>

<p>
Now that we have the <code>map</code> combinator the next step would be to add the <code>flatMap</code>
combinator for composing functions that produce futures. It would also allow
us to use <a href="http://docs.scala-lang.org/tutorials/FAQ/yield.html#translating-for-comprehensions">for comprehensions</a> that allow us to compose functions in a concise
manner. But I'll leave that and the other combinators as an exercise to the
reader or a second part to this post :)
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">Conclusion</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
Please note that the multi-threaded nature of our examples means that the main
thread might have finished and died before execution of all other threads has
finished. You can get around that by either waiting on the main thread or
implementing an abstraction similar to <code>Await</code> using a <a href="https://github.com/scala/scala/blob/27da46343cd545534819300235bc64ab74958c92/src/library/scala/concurrent/impl/Promise.scala#L194">polling mechanism</a>.
</p>

<p>
Have a look at Scala's <a href="https://github.com/scala/scala/blob/27da46343cd545534819300235bc64ab74958c92/src/library/scala/concurrent/impl/Promise.scala#L20">implementation</a> or the <a href="http://docs.scala-lang.org/overviews/core/futures.html">docs</a> on scala-lang.org for more
details. Happy hacking!
</p>
</div>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>Notes on pattern matching in Scala</title>
    <link type="text/html" href="http://www.beltmogul.me/2015/pattern-matching.html"/>
    <id>urn:uuid:2c31f3a9-17a0-499a-b4ee-7966b48d6129</id>
    <updated>2015-09-30T23:58:20+1200</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<div><h2><a href="http://beltmogul.me/2015/pattern-matching.html">Notes on pattern matching in Scala</a> <span class="date">30-09-2015</span></h2></div>


<div class="figure">
<p><a href="http://www.wikiart.org/en/m-c-escher/lizard-1" alt="Geckos" title="Geckos"><img src="../../img/a/lizards.jpg" alt="Geckos" title="Geckos" /></a>
</p>
</div>

<p>
This is a write-up of a quick presentation for summarizing Scala's pattern
matching facilities. I'll walk through a couple of examples and try to point out
interesting options and some lessons I've learned.
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Background</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
Pattern matching has many meanings to different people, even if we limit the
context to programming languages &#x2013; so what do I mean? I don't mean regular
expression matching. I also don't mean splitting function definitions up based
on patterns like you can in Haskell and many other languages:
</p>

<div class="org-src-container">

<pre class="src src-haskell">fac 0 = 1
fac n = n * fac n - 1
</pre>
</div>

<p>
For me, pattern matching is a useful tool that allows binding functionality to
data structures in a declarative way. This comes back to a difference that I see
between the two paradigms of object-oriented and functional programming: The
former aims to keep data and functionality close together, while the latter
separates them as orthogonal concerns. Pattern matching is most common in
functional languages and can be seen as supportive glue between data and
functionality.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Basics</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
Let's look at a short example for pattern matching in Scala:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Peter")
target match {
  case Some(n) &#8658; println(s"yay, found $n!")
  case None    &#8658; println(":(")
}
</pre>
</div>

<p>
Will print:
</p>

<pre class="example">
yay, found Peter!
</pre>

<p>
From a high-level the match functionality looks like a switch statement: We have
a couple of clauses with a pattern that acts as a guard on the left and
associated functionality on the right side. One difference to note is that we
can bind a value to a name and refer to it via the name on the right side.
</p>

<p>
In Scala there is no need to be complete when you list the case statements, the
following works just fine:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Hans")
target match {
  case Some(n) &#8658; println(s"yay, found $n!")
}
</pre>
</div>

<p>
Will print:
</p>

<pre class="example">
yay, found Hans!
</pre>

<p>
But keep in mind that all of this ends up being matched at runtime, and there is
no guarantee that the clauses include patterns that match a given value. The
following will fail at runtime with a MatchError:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option.empty[String]
target match {
  case Some(n) &#8658; println(s"yay, found $n!")
}
</pre>
</div>

<p>
But the compiler tries to warn you about this:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">warning: match may not be exhaustive.
It would fail on the following input: None
</pre>
</div>

<p>
But let's keep matching values. We used <code>n</code> to bind a string value in a previous
example. Lower case identifiers can be seen as wildcard patterns, they match
anything:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Hans")
target match {
  case p &#8658; println(s"yay, got value $p!")
}
</pre>
</div>

<p>
This will print:
</p>

<pre class="example">
yay, got value Some(Hans)!
</pre>

<p>
Really, anything:
</p>

<div class="org-src-container">

<pre class="src src-scala">null match {
  case p &#8658; println(s"yay, got a strange value: $p!")
}
</pre>
</div>

<p>
Will print:
</p>

<pre class="example">
yay, got a strange value: null!
</pre>

<p>
So if lower case identifiers are wildcard patterns, how can I refer back to a
value that is bound outside the <code>match</code> statement? There are at least two ways:
The first just escapes the naming convention by using an upper case letter to
start the identifier:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Hans")
val FirstName = "Hans"
target match {
  case Some(FirstName) &#8658; println(s"yay, found $FirstName!")
}
</pre>
</div>

<p>
Will cheerfully print:
</p>

<pre class="example">
yay, found Hans!
</pre>

<p>
Where the following would run through the second clause:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Hans")
val FirstName = "Peter"
target match {
  case Some(FirstName) &#8658; println(s"yay, found $FirstName!")
  case wildcard        &#8658; println(s"unsure, found: $wildcard")
}
</pre>
</div>

<p>
And print:
</p>

<pre class="example">
unsure, found: Some(Hans)
</pre>

<p>
An alternative approach is to add markup to the name to tell the parser that you
mean to refer to an identifier rather than declaring a wildcard pattern. You can
do this by adding backticks around the name:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Hans")
val firstName = "Hans"
target match {
  case Some(`firstName`) &#8658; println(s"yay, found $firstName!")
}
</pre>
</div>

<p>
Will print:
</p>

<pre class="example">
yay, found Hans!
</pre>

<p>
Now that we know that we can bind values to names via wildcard patterns a follow
up question, that <a href="https://twitter.com/archevel">@archevel</a> brought up, is whether one could refer back to a
name and what the semantics would be in that case. So for example, what happens
here:
</p>

<div class="org-src-container">

<pre class="src src-scala"> val target = Tuple2("Hans", "Hans")
 target match {
   case Tuple2(n, n) &#8658; println(s"yay, found $n!")
}
</pre>
</div>

<p>
The Scala compiler won't allow this and tells us that we can't re-use names:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">error: n is already defined as value n
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Typecase</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
Another basic pattern is a simple type check:
</p>

<div class="org-src-container">

<pre class="src src-scala">val x: Any = 21
x match {
  case i: Int &#8658; println(s"got an int smaller than ${i + 1}")
  case _      &#8658; println("not sure what i got")
}
</pre>
</div>

<p>
Which will print:
</p>

<pre class="example">
got an int smaller than 22
</pre>

<p>
I haven't used this pattern much, but one of the benefits you can see is that it
combines an <code>isInstanceOf</code> with an <code>asInstanceOf</code> in a concise manner. If you do
require a cast, this way you don't forget the check to prevent a
<code>ClassCastException</code>. For more details consider the follow excerpt from a <code>scalac
-Xprint:patmat</code> invocation:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">val x: Any = 21;
  {
    case &lt;synthetic&gt; val x1: Any = x;
    case5(){
      if (x1.isInstanceOf[Int])
        {
          &lt;synthetic&gt; val x2: Int = (x1.asInstanceOf[Int]: Int);
          matchEnd4(scala.this.Predef.println(scala.StringContext.apply("got an int smaller than ", "").s(x2.+(1))))
        }
      else
        case6()
    };
    case6(){
      matchEnd4(scala.this.Predef.println("not sure what i got"))
    };
    matchEnd4(x: Unit){
      x
    }
  }
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">Deep destructuring</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
One of the features that Scala's pattern matching facilities enable is deep
destructuring of data structures. In our first example we destructured a <code>Some</code>
value and "extracted" the contained string:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Hans")
target match {
  case Some(n) &#8658; println(s"yay, found $n!")
}
</pre>
</div>

<p>
This works for arbitrarily nested structures. Consider the following example:
</p>

<div class="org-src-container">

<pre class="src src-scala">case class Person(firstName: String, lastName: String, address: Address)
case class Address(
  street: String,
  houseNumber: String,
  city: String,
  postCode: String,
  country: Country
)
case class Country(name: String, code: String)

val hans = Person(
  "Hans",
  "Schmitt",
  Address(
    "Queen St",
    "220",
    "Auckland",
    "1010",
    Country("New Zealand", "NZ")
  )
)

hans match {
  case Person(fn, _, addr @ Address(_, _, _, _, Country(_, "NZ"))) &#8658;
     println(s"yay, found a Kiwi named $fn from at $addr!")
}
</pre>
</div>

<p>
Will print out:
</p>

<pre class="example">
yay, found a Kiwi named Hans living at Address(Queen St,220,Auckland,1010,Country(New Zealand,NZ))!
</pre>

<p>
The destructuring allows us to easily access sub-parts of a nested data
structure. This means that we can selectively pick values that we're interested
in and also restrict the pattern (cf. the "NZ" literal in the above example).
</p>

<p>
Two more things to point out about the example above: <code>_</code> is an anonymous wildcard
pattern and matches anything, while the <code>@</code> allows us to bind the value a pattern
matched to a name. In the above example I use it to access the address on the
right side while also destructuring and matching on sub-parts.
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">Disjunctions and guards</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
Another feature that can be helpful to concisely express a pattern are
disjunctions:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Hans")
target match {
  case Some(n @ ("Peter" | "Hans")) &#8658;
    println(s"yay, found $n!")
}
</pre>
</div>

<p>
This will print the following:
</p>

<pre class="example">
yay, found Hans!
</pre>

<p>
But would also find "Peter". More commonly, I've seen this solved via a
pattern guard:
</p>

<div class="org-src-container">

<pre class="src src-scala">val target = Option("Hans")
target match {
  case Some(n) if n == "Peter" || n == "Hans" &#8658;
    println(s"yay, found $n!")
}
</pre>
</div>

<p>
There you escape the pattern and can define a predicate as in a regular <code>if</code>
statement. But in the pattern guard you can even drop the parenthesis ;)
</p>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6">List destructuring</h2>
<div class="outline-text-2" id="text-orgheadline6">
<p>
Scala has additional helpers to match and destructure <code>List</code> values:
</p>

<div class="org-src-container">

<pre class="src src-scala">List(1, 3, 5) match {
  case Nil &#8658;
    println("empty list!")
  case head :: tail &#8658;
    println(s"head was $head, and tail $tail")
}
</pre>
</div>

<p>
You can split a list into its head and tail via <code>::</code> in a pattern and match on an
empty list via the <code>Nil</code> value. This allows for concise definitions of base cases
when working on lists:
</p>

<div class="org-src-container">

<pre class="src src-scala">def qs(lst: List[Int]): List[Int] = {
  lst match {
    case Nil | _ :: Nil &#8658;
      lst
    case lst &#8658;
      val p = lst(lst.size / 2)
      lst.partition(_ &lt;= p) match {
  case (Nil, sorted) &#8658; sorted
  case (sorted, Nil) &#8658; sorted
  case (lte, gt)     &#8658; qs(lte) ++ qs(gt)
      }
  }
}

println(qs(List(3, 1, 4, 1, 2, 6, 5, 3, 5, 9)))
</pre>
</div>

<p>
Which reconstructs a sorted list and prints:
</p>

<pre class="example">
List(1, 1, 2, 3, 4, 5, 3, 5, 6, 9)
</pre>

<p>
The first clause uses a disjunction to match both the empty list as well as
lists with a single element. Destructuring into head and tail of a list also
often comes up with recursive definitions over lists.
</p>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7">Partial functions</h2>
<div class="outline-text-2" id="text-orgheadline7">
<p>
Sometimes you can save some line noise by using a partial function. So instead
of explicitly matching on the single argument to the closure that we pass to
<code>foreach</code> in the following example:
</p>

<div class="org-src-container">

<pre class="src src-scala">val people = List(Option("Hans"), None, Option("Peter"))
people foreach { p &#8658;
  p match {
    case Some(fn) &#8658; println(s"yay, found $fn!")
    case None     &#8658; println(s":(")
  }
}
</pre>
</div>

<p>
You can pass a partial function that allows you to match and destructure in a
more concise fashion:
</p>

<div class="org-src-container">

<pre class="src src-scala">val people = List(Option("Hans"), None, Option("Peter"))
people foreach {
  case Some(fn) &#8658; println(s"yay, found $fn!")
  case None     &#8658; println(s":(")
}
</pre>
</div>

<p>
And both print:
</p>

<pre class="example">
yay, found Hans!
:(
yay, found Peter!
</pre>

<p>
But keep in mind that not every receiver of a partial function knows what to do
in case it isn't defined for a given input:
</p>

<div class="org-src-container">

<pre class="src src-scala">val people = List(Option("Hans"), None, Option("Peter"))
people foreach {
  case Some(fn) &#8658; println(s"yay, found $fn!")
}
</pre>
</div>

<p>
Which will throw a <code>MatchError</code> at runtime.
</p>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-2">
<h2 id="orgheadline8">Extractors</h2>
<div class="outline-text-2" id="text-orgheadline8">
<p>
Case classes allow for easy matching and destructuring, but not every value can
be used as easily in a <code>match</code> statement. Consider the following (silly) example:
</p>

<div class="org-src-container">

<pre class="src src-scala">import scala.concurrent._
import ExecutionContext.Implicits.global

Future.successful(3) match {
  case Future(3) &#8658; println("yay??")
  case wildcard  &#8658; println(s"caught a: $wildcard")
}
</pre>
</div>

<p>
The compiler won't let that pass and complains:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">error: object Future is not a case class, nor does it have an unapply/unapplySeq member
</pre>
</div>

<p>
So it seems we're missing an <code>unapply</code> method. Let's add that. It's called an
extractor and is Scala's way of adding pattern match functionality where you
can't use a case class:
</p>

<div class="org-src-container">

<pre class="src src-scala">import scala.concurrent._
import ExecutionContext.Implicits.global
import scala.util._

object MatchFuture {
  def unapply[T](v: Future[T]): Option[Try[T]] = {
    v.value
  }
}

Future.successful(3) match {
  case MatchFuture(Success(3)) &#8658; println("yay!!")
  case wildcard                &#8658; println(s"caught a: $wildcard")
}
</pre>
</div>

<p>
Which happily prints:
</p>

<pre class="example">
yay!!
</pre>

<p>
An extractor generally is a method that accepts a value and returns an <code>Option[T]</code>
to indicate whether a given value matches this pattern. This is also where the
destructuring takes place: We can transform a given value as we want. In the
above example we convert a <code>Future[T]</code> into a <code>Try[T]</code>.
</p>

<p>
But futures are values that are (often) computed on a different thread. So what
happens if we get lazy and sleep in our future computation:
</p>

<div class="org-src-container">

<pre class="src src-scala">import scala.concurrent._
import ExecutionContext.Implicits.global
import scala.util._

object MatchFuture {
  def unapply[T](v: Future[T]): Option[Try[T]] = {
    v.value
  }
}

Future { println("Let's sleep!"); Thread.sleep(100); 3 } match {
  case MatchFuture(Success(3)) &#8658; println("yay!!")
  case wildcard                &#8658; println(s"caught a: $wildcard")
}
</pre>
</div>

<p>
This will print the following:
</p>

<pre class="example">
Let's sleep!
caught a: scala.concurrent.impl.Promise$DefaultPromise@76cec888
</pre>

<p>
So we start to sleep and the <code>value</code> call to the future value will produce a <code>None</code>
value because the value hasn't been computed yet. So instead we fall to the
second clause and find an unfinished value.
</p>

<p>
To push this little example a bit further, you could add a blocking extractor:
</p>

<div class="org-src-container">

<pre class="src src-scala">import scala.concurrent._
import ExecutionContext.Implicits.global
import scala.concurrent.duration._
import scala.util._

object MatchFutureBlocking {
  def unapply[T](v: Future[T]): Option[T] = {
    Try(Await.result(v, 1.seconds)).toOption
  }
}

Future { println("Let's sleep!"); Thread.sleep(100); 3 } match {
  case MatchFutureBlocking(3) &#8658; println("yay!!")
  case wildcard               &#8658; println(s"caught a: $wildcard")
}
</pre>
</div>

<p>
In this case we calmly await the future value to be computed successfully and
print:
</p>

<pre class="example">
Let's sleep!
yay!!
</pre>

<p>
But keep in mind that the <code>toOption</code> call will silently hide failures that happens
as the future value is being computed:
</p>

<div class="org-src-container">

<pre class="src src-scala">import scala.concurrent._
import ExecutionContext.Implicits.global
import scala.concurrent.duration._
import scala.util._

object MatchFutureBlocking {
  def unapply[T](v: Future[T]): Option[T] = {
    Try(Await.result(v, 1.seconds)).toOption
  }
}

Future.failed[Int](new RuntimeException("blablubb")) match {
  case MatchFutureBlocking(3) &#8658; println("yay??")
  case wildcard &#8658; println(s"caught a: $wildcard")
}
</pre>
</div>

<p>
This will silently fall to the second clause and print:
</p>

<pre class="example">
caught a: scala.concurrent.impl.Promise$KeptPromise@3084c696
</pre>

<p>
So my example is a bit silly, but if you're interested in more useful extractors
have a look at <a href="https://github.com/scala/scala/blob/2.11.x/src/library/scala/util/control/NonFatal.scala#L43">NonFatal</a> or <a href="https://github.com/scala/scala/blob/2.11.x/src/library/scala/concurrent/duration/Duration.scala#L106">Duration</a>. <a href="http://lampwww.epfl.ch/~emir/written/MatchingObjectsWithPatterns-TR.pdf">Matching Objects With Patterns</a> is a nice
start for more details as well.
</p>

<p>
Happy hacking!
</p>
</div>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>Gradient</title>
    <link type="text/html" href="http://www.beltmogul.me/2015/gradient.html"/>
    <id>urn:uuid:eb2d01af-159b-4472-a5b8-1321b760c42e</id>
    <updated>2015-08-29T19:35:20+1200</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">Gradient</h1>

<div class="figure">
<p><a href="../../img/a/gradient-orig.jpg" alt="Gradient" title="Gradient"><img src="../../img/a/gradient.jpg" alt="Gradient" title="Gradient" /></a>
</p>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>Red waves</title>
    <link type="text/html" href="http://www.beltmogul.me/2015/red-waves.html"/>
    <id>urn:uuid:74edd95a-b495-4293-b952-6971351a8e26</id>
    <updated>2015-08-05T13:21:20+1200</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">Red waves</h1>

<div class="figure">
<p><a href="../../img/a/red-waves-orig.jpg" alt="Red waves" title="Red waves"><img src="../../img/a/red-waves.jpg" alt="Red waves" title="Red waves" /></a>
</p>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title></title>
    <link type="text/html" href="http://www.beltmogul.me/2015/and-then-try.html"/>
    <id>urn:uuid:0da593ec-150b-455a-aa78-c676402ab07f</id>
    <updated>2015-08-04T15:28:42+1200</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">andThen Try another implicit class</h1>
<p>
When using Scala, I often guard application boundaries by wrapping the call to
another library or database in a Try. Consider the following example:
</p>

<div class="org-src-container">

<pre class="src src-scala">def findUserId(name: String): Try[Long] = {
  Try {
    q.execute(s"SELECT id FROM users WHERE name = '$name'")
  }
}
</pre>
</div>

<p>
Wrapping the call in a Try allows me to indicate that something might go wrong
here and I don't really know what to do. The database might hit a connection
limit or be temporarily unavailable, but at this stage it's unclear how to best
handle it. We can use the type to propagate that information up to the callers
where more context is available.
</p>

<p>
Given that I'm trying to identify exceptional cases, I often want to log those
for visibility. Sometimes it's better to do it in the caller, if there's more
context that should be logged. But often I want to log it right where I create
the Try. One pattern that I use is the following:
</p>

<div class="org-src-container">

<pre class="src src-scala">def findUserId(name: String): Try[Long] = {
  val result = Try {
    q.execute(s"SELECT id FROM users WHERE name = '$name'")
  }

  result match {
    case Success(_)  &#8658;
    case Failure(ex) &#8658;
      log.error(s"Exception while finding ID for user with name $name", ex)
  }

  result
}
</pre>
</div>

<p>
There are two things here that are boilerplate for me:
</p>

<ol class="org-ol">
<li>We only want to match the failure case but we still need to add a case for a
possible Success value.
</li>

<li>We only want to side-effect so we have to store the original value to be able
to return it after we log the message.
</li>
</ol>

<span><a href="/2014/pipes.html">Another</a> quick implicit class to the rescue!</span>

<div class="org-src-container">

<pre class="src src-scala">implicit class TryOps[A](t: Try[A]) {
  def andThen(pf: PartialFunction[Try[A], Unit]): Try[A] = {
    if (pf.isDefinedAt(t)) {
      pf.apply(t)
    }

    t
  }
}
</pre>
</div>

<p>
This allows you to write the following version:
</p>

<div class="org-src-container">

<pre class="src src-scala">def findUserId(name: String): Try[Long] = {
  Try {
    q.execute(s"SELECT id FROM users WHERE name = '$name'")
  } andThen {
    case Failure(ex) &#8658;
      log.error(s"Exception while finding ID for user with name $name", ex)
  }
}
</pre>
</div>

<p>
The andThen just passes the original result through, so no need for an
intermediary step (2), and the PartialFunction only gets applied when it's
defined for the given argument, so no need for that superfluous Success case
either (1).
</p>

<p>
This might look very familiar to you: I got this idea from
<a href="https://github.com/scala/scala/blob/70f0b1ded880ec9b3a9478d02f1898fcfeee230c/src/library/scala/concurrent/Future.scala#L431">Future</a>. There
the andThen also indicates a side-effect and allows for partial
matching. <a href="https://groups.google.com/d/msg/scala-user/Yysmkc2iJVs/-7ApHGkjSrYJ">Others</a>
have asked for an andThen to be added to Try as well and I'm not sure why it
hasn't been, but adding it via an implicit class is easy enough :)
</p>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title></title>
    <link type="text/html" href="http://www.beltmogul.me/2015/empathy.html"/>
    <id>urn:uuid:59bf7014-3c28-46ff-89e0-5931154247d0</id>
    <updated>2015-07-18T19:21:20+0100</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">Empathy Is Actually a Choice</h1>

<div class="figure">
<p><a href="http://www.nytimes.com/2015/07/12/opinion/sunday/empathy-is-actually-a-choice.html" alt="Empathy Is Actually a Choice" title="Empathy Is Actually a Choice" height="310"><img src="http://static01.nyt.com/images/2015/07/12/opinion/sunday/12gray/12gray-articleLarge.jpg" alt="Empathy Is Actually a Choice" title="Empathy Is Actually a Choice" height="310" /></a>
</p>
</div>

<p>
via <a href="http://kottke.org/15/07/the-power-of-empathy">kottke</a>
</p>
</div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>§ glowing</title>
    <link type="text/html" href="http://www.beltmogul.me/2015/glowing.html"/>
    <id>urn:uuid:ddb3f13a-8d52-4eed-a0c9-8ca3bf731fe9</id>
    <updated>2015-07-18T19:21:20+0100</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">§ glowing</h1>

<div class="figure">
<p><img src="../../img/a/glowing.jpg" alt="glowing" title="glowing" />
</p>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>§ soft</title>
    <link type="text/html" href="http://www.beltmogul.me/2015/soft.html"/>
    <id>urn:uuid:29dc9b09-70e2-4f13-bb7e-0d7588b83a73</id>
    <updated>2015-03-22T22:17:20+1300</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">§ soft</h1>

<div class="figure">
<p><img src="../../img/a/P1274794.jpg" alt="soft" title="soft" />
</p>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>


  <entry>
    <title>§ 2015-03-22</title>
    <link type="text/html" href="http://www.beltmogul.me/2015/2015-03-22.html"/>
    <id>urn:uuid:cce48270-87cb-41e6-9157-bb1818e7e482</id>
    <updated>2015-03-22T22:05:20+1300</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">§ 2015-03-22</h1>
<p>
<a href="http://moo.nac.uci.edu/~hjm/parsync/">parsync</a>
parallel rsync
</p>

<p>
<a href="http://yusugomori.com/projects/css-sans/fonts">CSS SANS</a>
css font
</p>

<p>
<a href="https://medium.com/@chadfowler/the-best-job-description-for-an-engineer-ever-written-57b42919cc2f">The best job description for an engineer ever written</a>
+1
</p>

<p>
<a href="http://www.upat6.com/10-things-you-should-know-before-you-start-getting-up-at-6-am/">10 things you should know before you start getting up at 6am</a>
</p>

<p>
<a href="https://news.ycombinator.com/item?id=9207360">Ask HN: Favorite podcasts?</a>
</p>

<p>
<a href="http://whitane.com/post/recovering-deleted-files-in-osx/">recovering deleted files in osx</a>
 for open files
</p>

<p>
<a href="http://thekidshouldseethis.com/post/3d-printed-blooming-fibonacci-zoetrope-sculptures">3D-printed "blooming" Fibonacci zoetrope sculptures</a>
pretty.
</p>

<p>
<a href="http://vincebuffalo.com/2013/08/08/the-mighty-named-pipe.html">Using named pipes and process substitution</a>
mighty indeed
</p>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>§ clouded</title>
    <link type="text/html" href="http://www.beltmogul.me/2015/clouded.html"/>
    <id>urn:uuid:36972c8a-8377-4217-b383-2ca7167ea4b4</id>
    <updated>2015-03-08T07:47:20+1300</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">§ clouded</h1>

<div class="figure">
<p><img src="../../img/a/clouded.jpg" alt="clouded" title="clouded" />
</p>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>emacs</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/emacs.html"/>
    <id>urn:uuid:6505aca3-ec8f-fa74-ee13-08e09ab1c945</id>
    <updated>2014-12-07T07:21:42+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">§ emacs</h1>
<p>
Emacs Lisp and the ability to hack Emacs like a REPL on steroids is probably
Emacs' greatest feature from my perspective. I enjoy the immediacy of hacking
Emacs in Emacs every time. As I started to clean up my
<a href="https://github.com/fgeller/emacs.d/">.emacs.d</a> recently, I enjoyed writing a
couple of extensions myself. This post introduces each one briefly. Maybe some
of these extensions are useful to you as well or trigger your interest to hack
on some yourself :)
</p>

<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">basic theme</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
As I started with a clean slate, I didn't have major modes installed for some of
the languages I work with daily. Funnily enough, I enjoyed the lack of colors
and am still practicing abstinence today ;) Controversial I bet, but it works
for me at the moment. I generally try to reduce the UI noise, much like
Bastien's <a href="http://bzg.fr/emacs-strip-tease.html">#Emacs, naked</a>. I wrote the
minimal <a href="https://github.com/fgeller/basic-theme.el">fgeller/basic-theme.el</a> to
accomodate this. Here's the <code>*scratch*</code> buffer after startup:
</p>


<div class="figure">
<p><a href="../../img/o/basic-scratch.png" alt="basic theme: scratch buffer" title="basic theme: scratch buffer"><img src="../../img/o/basic-scratch-resized.png" alt="basic theme: scratch buffer" title="basic theme: scratch buffer" /></a>
</p>
</div>

<p>
Not much changes visually when editing Emacs Lisp:
</p>


<div class="figure">
<p><a href="../../img/o/basic-emacs-lisp.png" alt="basic theme: Emacs Lisp" title="basic theme: Emacs Lisp"><img src="../../img/o/basic-emacs-lisp-resized.png" alt="basic theme: Emacs Lisp" title="basic theme: Emacs Lisp" /></a>
</p>
</div>

<p>
Notice that the mode-line is nearly entirely hidden. I use a little helper to
make it visible from time to time. Check out
<a href="https://github.com/fgeller/basic-theme.el">fgeller/basic-theme.el</a> for the
basic idea.
</p>
</div>
</div>

<div id="outline-container-unnumbered-2" class="outline-2">
<h2 id="unnumbered-2">highlight-thing</h2>
<div class="outline-text-2" id="text-unnumbered-2">
<p>
While I disable the <code>font-lock</code> machinery globally to prevent syntax
highlighting, the UI is not fully monochrome. Certain elements are still
colorized to facilitate reading and finding patterns.
</p>

<p>
One package I used previously is the excellent
<a href="https://github.com/nschum/highlight-symbol.el">nschum/highlight-symbol.el</a>
that highlights the symbol under point and the other occurrences of it in the
current buffer. However, it relies on <code>font-lock</code> for highlighting, which I'm
trying to get around. So I wrote a very simple global minor mode that does just
this, highlight the current symbol or word under point:
<a href="https://github.com/fgeller/highlight-thing.el">fgeller/highlight-thing.el</a>.
</p>


<div class="figure">
<p><a href="../../img/o/highlight-thing.png" alt="highlight-thing" title="highlight-thing"><img src="../../img/o/highlight-thing-resized.png" alt="highlight-thing" title="highlight-thing" /></a>
</p>
</div>

<p>
This allows me to quickly find occurrences of a variable or function name. The
minor mode uses only built-in functionality and is very lightweight (~50 lines
of code). There are plenty of solutions that are more sophisticated
(e.g. <a href="https://github.com/nschum/highlight-symbol.el">nschum/highlight-symbol.el</a>
which also adds helpers for navigation, or
<a href="https://github.com/boyw165/hl-anything">boyw165/hl-anything</a> which introduces
more detail control over what to highlight when and how to get around multiple
highlights conflicting with each other), but I enjoy the simplicity of
<code>highlight-thing</code>.
</p>
</div>
</div>

<div id="outline-container-unnumbered-3" class="outline-2">
<h2 id="unnumbered-3">fingers</h2>
<div class="outline-text-2" id="text-unnumbered-3">
<p>
The last extension is the result of trying multiple other modes to get around
the infamous pinky or modifier problem. I had used
<a href="https://github.com/chrisdone/god-mode">chrisdone/god-mode</a> happily for a
while: It allows for a comfortable transition to modal editing. When enabled,
all commands that require the control modifier <code>C-</code> are available as if <code>C-</code> was
pressed. So to move point a line up and then down again you can press <code>pn</code>
rather than <code>C-p C-n</code>. Other prefixes like <code>M-</code> and <code>C-M-</code> are also conveniently
accessible via the <code>g</code> and <code>G</code> prefix.
</p>

<p>
I recently tried <a href="https://github.com/jyp/boon">jyp/boon</a> which requires a
bigger step by introducing entirely new bindings for navigation and text
manipulation. Rather than relying on Emacs' bindings that are mostly based on
mnemonics, <code>boon</code> adds key bindings that are organized with ergonomics in mind
and several helpful text manipulation commands. For example, navigation commands
are bound to your right hand: home row allows for navigation within a line, the
top row allows for navigation across lines. I enjoyed the ideas quite a bit, but
found it rather hard to extend <code>boon</code>. It is optimized for the Colemak keyboard
layout and I found <a href="https://github.com/fgeller/boon/commits/workman">no easy
mapping mechanism</a>.
</p>

<p>
Standing on the shoulders of both giants, I wrote
<a href="https://github.com/fgeller/fingers.el">fgeller/fingers.el</a>. It combines ideas
from both <code>god-mode</code> and <code>boon</code>. For example, navigation and text manipulation
is split between right and left hand like for <code>boon</code> and you can access commands
that require the <code>M-</code> prefix similarly to <code>god-mode</code>. <code>fingers-mode</code> has no
external dependencies and I try to limit the bindings to what is generally
applicable. This is a short demo of some of the text manipulation commands as
discussed in the README:
</p>


<div class="figure">
<p><a href="../../img/o/fingers-mode.gif" alt="fingers-mode" title="fingers-mode" width="500px"><img src="../../img/o/fingers-mode.gif" alt="fingers-mode" title="fingers-mode" width="500px" /></a>
</p>
</div>

<p>
The README contains more details and examples and I added mappings for Qwerty
and Neo, so maybe give it a try and let me know what you think :)
</p>
</div>
</div>

<div id="outline-container-unnumbered-4" class="outline-2">
<h2 id="unnumbered-4">publish</h2>
<div class="outline-text-2" id="text-unnumbered-4">
<p>
All three can be installed by cloning the respective repository and adding it to
your <code>load-path</code> manually. <a href="https://github.com/fgeller/fingers.el">fingers.el</a>
is already availabe via <a href="http://melpa.milkbox.net:1337/#/fingers">MELPA</a>, and
the other two packages may soon be available to. The process of adding a package
to MELPA was straight-forward and smooth:
</p>

<ul class="org-ul">
<li>Fork <a href="https://github.com/milkypostman/melpa">milkypostman/melpa</a>
</li>
<li><p>
Add a recipe of the form
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(name :fetcher github :repo "fgeller/name.el")
</pre>
</div>
</li>
<li><p>
Package it locally:
</p>
<div class="org-src-container">

<pre class="src src-sh">make recipes/name
</pre>
</div>
</li>
<li><p>
Inspect and install it in a sandbox locally via (the package is installable
via the usual <code>(list-packages)</code> functionality.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">EMACS=~/bin/emacs make sandbox
</pre>
</div>
</li>
<li>Commit to a new branch and push it to your fork
</li>
<li>Create a pull request against upstream.
</li>
<li>Voilà!
</li>
</ul>

<p>
That's it, happy Emacs hacking :)
</p>
</div>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>


  <entry>
    <title>§ hidden</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/hidden.html"/>
    <id>urn:uuid:0349dfac-5ff2-40b3-bbb4-f3954b8aa20d</id>
    <updated>2014-12-02T21:07:20+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">§ hidden</h1>

<div class="figure">
<p><img src="../../img/a/PA211508.jpg" alt="hidden" title="hidden" />
</p>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>


  <entry>
    <title>§ on the edge</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/on-the-edge.html"/>
    <id>urn:uuid:d0708b53-eb87-9cb4-9a93-47df499ab851</id>
    <updated>2014-10-13T08:07:20+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">§ on the edge</h1>

<div class="figure">
<p><img src="../../img/a/PA131440.jpg" alt="on the edge" title="on the edge" />
</p>
</div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>


  <entry>
    <title>§ pastels</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/pastels.html"/>
    <id>urn:uuid:a267a848-896c-59b4-62f3-683f403042eb</id>
    <updated>2014-10-08T08:11:28+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<h1 class="title">§ pastels</h1>

<div class="figure">
<p><img src="../../img/a/PC293398.jpg" alt="pastels" title="pastels" />
</p>
</div>

      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>§ 2014-10-04</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/2014-10-04.html"/>
    <id>urn:uuid:85b78d44-bb7f-5884-a8d3-889a5a53a753</id>
    <updated>2014-10-04T04:36:20+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1 class="title">§ 2014-10-04</h1>
<p>
<a href="http://www.infoq.com/presentations/scaling-gilt">Learnings from Building and Scaling Gilt</a>  growth &amp; innovation.
</p>

<p>
<a href="http://fivethirtyeight.com/features/in-126-years-english-football-has-seen-13475-nil-nil-draws/">In 126 Years, English Football Has Seen 13,475 Nil-Nil Draws</a>  "a bit dull"
</p>

<p>
<a href="http://www.slideshare.net/ktoso/distributed-consensus-aka-what-do-we-eat-for-lunch">Distributed Consensus A.K.A. "What do we eat for lunch?"</a>  paxos by example.
</p>

<p>
<a href="http://nautil.us/blog/the-sound-so-loud-that-it-circled-the-earth-four-times">The Sound So Loud That It Circled the Earth Four Times</a>  wow.
</p>

<p>
<a href="http://www.thoughtworks.com/insights/blog/first-story-every-project">The First Story in Every Project</a>  release early!
</p>

<p>
<a href="http://bouk.co/blog/idiomatic-generics-in-go/">Idiomatic Generics in Go</a>  wow.
</p>

<p>
<a href="http://kazimirmajorinc.com/Documents/Lisp-code-typography/index.html">A few examples of Lisp code typography</a>   history of s-expressions.
</p>

<p>
<a href="http://www.wilfred.me.uk/blog/2014/09/27/the-definitive-guide-to-syntax-highlighting/">The Definitive Guide To Syntax Highlighting</a>  extensive list for emacs.
</p>

<p>
<a href="https://www.youtube.com/watch?v=mq-r20mlGes">Shake Your Silk-Maker: The Dance of the Peacock Spider</a>  o_O
</p>

<p>
<a href="http://www.slate.com/articles/sports/sports_nut/2014/09/sinquefield_cup_one_of_the_most_amazing_feats_in_chess_history_just_happened.single.html">One of the most amazing feats in chess history just happened</a>  interesting read.
</p>

<p>
<a href="http://c9x.me/edit/">Edit - Home Brewed Text Editor</a>  acme + vi
</p>

<p>
<a href="http://bocoup.com/weblog/developer-weeks/">Why hourly time tracking doesn't work for software</a> &#x2026;
</p>

<p>
<a href="https://github.com/killme2008/defun">killme2008/defun</a>  pattern matching on function args via a macro.
</p>

<p>
<a href="http://austinmann.com/trek/iphone-6-plus-camera-review-iceland">iPhone 6 Plus Camera Review: Iceland — Austin Mann</a>  5s vs 6p.
</p>

<p>
<a href="http://vimeo.com/85070976">Aurora Substorm - Real time motion</a>  wow.
</p>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>


  <entry>
    <title>clojure workflow</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/clojure-workflow.html"/>
    <id>urn:uuid:f375a7b8-5e09-3a44-3833-0e41394994a6</id>
    <updated>2014-08-31T09:13:46+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>
This post is a write-up of a short presentation that I gave at the last Clojure
meetup in Auckland. The topic was "Real World Clojure" and I gave a quick demo
of the interactive workflow that I enjoyed for my last side projects. For the
demo, I used <a href="http://clojure-liberator.github.io/liberator/">Liberator</a> to implement basic GET and POST operations against a
<code>/users</code> resource and <a href="http://www.datomic.com/">Datomic</a> for storage. But a fair warning: there isn't much
detail about either one of those two technologies in my post. My focus was on
the interactive workflow that I enjoy so much about LISPs. Both Liberator and
Datomic are well documented, perhaps this post gets you interested in
either.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Setup</h2>
<div class="outline-text-2" id="text-1">
<p>
The setup is just Emacs with <a href="https://github.com/clojure-emacs/cider">clojure-emacs/cider</a> and a <a href="http://leiningen.org/">Leiningen</a> project. No
special configuration on the Emacs side, and I pushed the project template
with tests and a basic Datomic setup to <a href="https://github.com/fgeller/clj-meetup-akl-2014-08">fgeller/clj-meetup-akl-2014-08</a>.
</p>

<p>
Luckily, the project contains basic tests for the HTTP interface:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span>fact <span style="color: #0a74b9;">"listing users"</span>
      <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2ecc71;">[</span>response <span style="color: #2492db;">(</span>handlers <span style="color: #9b59b6;">(</span>request <span style="color: #e67e22;">:get</span> <span style="color: #0a74b9;">"/users"</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">)</span><span style="color: #2ecc71;">]</span>
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:status</span> response<span style="color: #2ecc71;">)</span> =&gt; 200
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:body</span> response<span style="color: #2ecc71;">)</span> =&gt; <span style="color: #0a74b9;">"{}"</span><span style="color: #1abc9c;">)</span>
      <span style="color: #1abc9c;">(</span>cleanup<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span>fact <span style="color: #0a74b9;">"adding and listing a user"</span>
      <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2ecc71;">[</span>request <span style="color: #2492db;">(</span>body <span style="color: #9b59b6;">(</span>content-type <span style="color: #f1c40f;">(</span>request <span style="color: #e67e22;">:post</span> <span style="color: #0a74b9;">"/users"</span><span style="color: #f1c40f;">)</span> <span style="color: #0a74b9;">"application/json"</span><span style="color: #9b59b6;">)</span> <span style="color: #0a74b9;">"{\"nick\": \"hans\"}"</span><span style="color: #2492db;">)</span>
            response <span style="color: #2492db;">(</span>handlers request<span style="color: #2492db;">)</span><span style="color: #2ecc71;">]</span>
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:status</span> response<span style="color: #2ecc71;">)</span> =&gt; 201<span style="color: #1abc9c;">)</span>
      <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2ecc71;">[</span>response <span style="color: #2492db;">(</span>handlers <span style="color: #9b59b6;">(</span>request <span style="color: #e67e22;">:get</span> <span style="color: #0a74b9;">"/users"</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">)</span><span style="color: #2ecc71;">]</span>
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:status</span> response<span style="color: #2ecc71;">)</span> =&gt; 200
        <span style="color: #2ecc71;">(</span><span style="color: #e67e22;">:body</span> response<span style="color: #2ecc71;">)</span> =&gt; <span style="color: #0a74b9;">"{\"1\":{\"nick\":\"hans\"}}"</span><span style="color: #1abc9c;">)</span>
      <span style="color: #1abc9c;">(</span>cleanup<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
The tests are written with <a href="https://github.com/marick/Midje">marick/Midje</a> and outline the basic requirements for
this example. For test feedback, I use <code>eshell</code> and Leiningen to start a REPL
via <code>(compile "lein repl" t)</code> in the project root. Midje includes support for
triggering test runs on file change, so let's load that up:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-12.32.52-PM.png" alt="Midje to run tests" title="Midje to run tests"><img src="../../img/o/Screen-Shot-2014-08-31-at-12.32.52-PM-resized.png" alt="Midje to run tests" title="Midje to run tests" /></a>
</p>
</div>

<p>
Let's take a quick look at the template (<code>src/meetup-users/core.clj</code>). Basic
namespacing and imports to get started:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">ns</span> <span style="color: #2492db;">meetup-users.core</span>
  <span style="color: #1abc9c;">(</span><span style="color: #e67e22;">:require</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">clojure.data.json</span> <span style="color: #e67e22;">:as</span> json<span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">clojure.java.io</span> <span style="color: #e67e22;">:as</span> io<span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">datomic.api</span> <span style="color: #e67e22;">:only</span> <span style="color: #2492db;">[</span>q db<span style="color: #2492db;">]</span> <span style="color: #e67e22;">:as</span> peer<span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">liberator.core</span> <span style="color: #e67e22;">:refer</span> <span style="color: #2492db;">[</span>resource defresource<span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">liberator.dev</span> <span style="color: #e67e22;">:refer</span> <span style="color: #2492db;">[</span>wrap-trace<span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">compojure.core</span> <span style="color: #e67e22;">:refer</span> <span style="color: #2492db;">[</span>defroutes <span style="color: #e67e22;">ANY</span><span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span>
   <span style="color: #2ecc71;">[</span><span style="color: #2492db;">ring.adapter.jetty</span> <span style="color: #e67e22;">:refer</span> <span style="color: #2492db;">[</span>run-jetty<span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
Define where to find Datomic and how we layout our data:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">def</span> <span style="color: #8e44ad;">datomic-uri</span> <span style="color: #7f8c8d;">"datomic:mem://users"</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">def</span> <span style="color: #8e44ad;">schema-txs</span> <span style="color: #1abc9c;">[</span><span style="color: #2ecc71;">{</span><span style="color: #e67e22;">:db/id</span> #<span style="color: #2492db;">db</span>/id<span style="color: #2492db;">[</span><span style="color: #e67e22;">:db.part/db</span><span style="color: #2492db;">]</span>
                  <span style="color: #e67e22;">:db/ident</span> <span style="color: #e67e22;">:user/id</span>
                  <span style="color: #e67e22;">:db/valueType</span> <span style="color: #e67e22;">:db.type/long</span>
                  <span style="color: #e67e22;">:db/cardinality</span> <span style="color: #e67e22;">:db.cardinality/one</span>
                  <span style="color: #e67e22;">:db.install/_attribute</span> <span style="color: #e67e22;">:db.part/db</span><span style="color: #2ecc71;">}</span>,
                 <span style="color: #2ecc71;">{</span><span style="color: #e67e22;">:db/id</span> #<span style="color: #2492db;">db</span>/id<span style="color: #2492db;">[</span><span style="color: #e67e22;">:db.part/db</span><span style="color: #2492db;">]</span>
                  <span style="color: #e67e22;">:db/ident</span> <span style="color: #e67e22;">:user/nick</span>
                  <span style="color: #e67e22;">:db/valueType</span> <span style="color: #e67e22;">:db.type/string</span>
                  <span style="color: #e67e22;">:db/cardinality</span> <span style="color: #e67e22;">:db.cardinality/one</span>
                  <span style="color: #e67e22;">:db.install/_attribute</span> <span style="color: #e67e22;">:db.part/db</span><span style="color: #2ecc71;">}</span><span style="color: #1abc9c;">]</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
The URI defines that we're not going to persist our data for now and just use
the in-memory storage for a database name <code>users</code>. The <code>schema-txs</code> hold the
transactions to describe user entities. We define two attributes <code>:user/id</code> and
<code>:user/nick</code>, the <code>:user/id</code> will be the external ID, rather than exposing the
internal entity ID. To read more about the structure of these transactions,
you can get started <a href="http://docs.datomic.com/transactions.html">here</a>.
</p>

<p>
Then some wrappers around Datomic's API to make testing a bit easier:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">setup-database</span> <span style="color: #1abc9c;">[]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/create-database datomic-uri<span style="color: #1abc9c;">)</span>
  @<span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/transact <span style="color: #2ecc71;">(</span><span style="color: #2492db;">peer</span>/connect datomic-uri<span style="color: #2ecc71;">)</span> schema-txs<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">delete-database</span> <span style="color: #1abc9c;">[]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/delete-database datomic-uri<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">read-database</span> <span style="color: #1abc9c;">[]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/db <span style="color: #2ecc71;">(</span><span style="color: #2492db;">peer</span>/connect datomic-uri<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span>setup-database<span style="color: #34495e;">)</span>
</pre>
</div>

<p>
This will be the starting point, an empty resource definition:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
The following hooks the resource into the default ring setup and defines a
helper to start up the application using jetty:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defroutes</span> <span style="color: #2492db;">app-routes</span> <span style="color: #1abc9c;">(</span><span style="color: #e67e22;">ANY</span> <span style="color: #0a74b9;">"/users"</span> <span style="color: #2ecc71;">[]</span> users-resource<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">def</span> <span style="color: #8e44ad;">handlers</span> <span style="color: #1abc9c;">(</span>wrap-trace app-routes <span style="color: #e67e22;">:header</span> <span style="color: #e67e22;">:ui</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
<span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">boot</span> <span style="color: #1abc9c;">[</span>port<span style="color: #1abc9c;">]</span> <span style="color: #1abc9c;">(</span>run-jetty #'handlers <span style="color: #2ecc71;">{</span><span style="color: #e67e22;">:port</span> port <span style="color: #e67e22;">:join?</span> <span style="color: #e67e22;">false</span><span style="color: #2ecc71;">}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
The <code>wrap-trace</code> middleware is provided by Liberator to make debugging easier,
will see it's output shortly.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Let's get started</h2>
<div class="outline-text-2" id="text-2">
<p>
We can see that all tests fail, and the easiest target seems to be the GET
request. So let's fake that one by returning an empty map:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
But the test results aren't very helpful, we're just getting 500s:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-1.28.17-PM.png" alt="Test failures" title="Test failures"><img src="../../img/o/Screen-Shot-2014-08-31-at-1.28.17-PM-resized.png" alt="Test failures" title="Test failures" /></a>
</p>
</div>

<p>
So let's use Liberator to figure this out. Make sure you started cider via
<code>cider-jack-in</code>, which starts a headless REPL that we can use for evaluating our
code. Evaluating the <code>core.clj</code> buffer via <code>cider-eval-buffer</code> allows for starting
the application on port 2134 via <code>(boot 2134)</code>. Just add the expression in your
buffer and evaluate it via <code>C-x C-e</code> (with point after the expression). Your
minibuffer should show some feedback that the expression was evaluated, in my
case:
</p>

<div class="org-src-container">

<pre class="src src-text">=&gt; #&lt;Server org.eclipse.jetty.server.Server@6df54136&gt;
</pre>
</div>

<p>
Don't forget to remove the expression once you're done, or you'll get warnings
as you tests run in the background.
</p>

<p>
Now create or change to an eshell buffer to query the application. Issue a
request via <code>curl -v localhost:2134/users</code>, this is my result:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-1.43.32-PM.png" alt="Curl output" title="Curl output"><img src="../../img/o/Screen-Shot-2014-08-31-at-1.43.32-PM-resized.png" alt="Curl output" title="Curl output" /></a>
</p>
</div>

<p>
You can see the result of adding the <code>wrap-trace</code> middleware: We're getting
feedback on the decisions that Liberator took for our request. The first check
is whether the service is available, then if the request's method is known and
so on. It seems to find no available media types:
</p>

<div class="org-src-container">

<pre class="src src-text">&lt; X-Liberator-Trace: :decision (:media-type-available? nil)
&lt; X-Liberator-Trace: :handler (:handle-not-acceptable "(default implementation)")
</pre>
</div>

<p>
Before we change that, the following lines give you a link to a visual
representation of the decision graph:
</p>

<div class="org-src-container">

<pre class="src src-text">&lt; Link: &lt;//x-liberator/requests/4eo3a&gt;; rel=x-liberator-trace
&lt; X-Liberator-Trace-Id: 4eo3a
</pre>
</div>

<p>
You can open the request in your browser and follow the colored path to figure
out what happened. In my case the URL is <a href="http://localhost:2134/x-liberator/requests/4eo3a">http://localhost:2134/x-liberator/requests/4eo3a</a>
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-1.53.12-PM.png" alt="Decision graph" title="Decision graph"><img src="../../img/o/Screen-Shot-2014-08-31-at-1.53.12-PM-resized.png" alt="Decision graph" title="Decision graph" /></a>
</p>
</div>

<p>
To make the media type avaible, we just add:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
Now we only have the POST functionality left ;)
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-1.56.01-PM.png" alt="Decision graph." title="Decision graph."><img src="../../img/o/Screen-Shot-2014-08-31-at-1.56.01-PM-resized.png" alt="Decision graph." title="Decision graph." /></a>
</p>
</div>

<p>
Let's give that a try and take a look at the data we're given:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span>println context<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
But the POST request is failing with a 405. If you don't know all status codes
by heart, like me, just evaluate the buffer again (or just the <code>defresource</code>
expression) and issue another request via:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">curl -v -XPOST -H'Content-type: application/json' -d'{<span style="color: #0a74b9;">"nick"</span>: <span style="color: #0a74b9;">"hans"</span>}' localhost:2134/users
</pre>
</div>

<p>
And Liberator will tell us:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-2.05.26-PM.png" alt="Method not allowed." title="Method not allowed."><img src="../../img/o/Screen-Shot-2014-08-31-at-2.05.26-PM-resized.png" alt="Method not allowed." title="Method not allowed." /></a>
</p>
</div>

<p>
So let's allow that method:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span>println context<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
And there we have our request context:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-2.07.28-PM.png" alt="Request context." title="Request context."><img src="../../img/o/Screen-Shot-2014-08-31-at-2.07.28-PM-resized.png" alt="Request context." title="Request context." /></a>
</p>
</div>

<p>
And the POST test succeeds as well! ;) So let's stop faking and actually pass
the data on to Datomic:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">find-all-users</span> <span style="color: #1abc9c;">[</span>database<span style="color: #1abc9c;">]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #2492db;">peer</span>/q '<span style="color: #2ecc71;">[</span><span style="color: #e67e22;">:find</span> ?u <span style="color: #e67e22;">:where</span> <span style="color: #2492db;">[</span>?u <span style="color: #e67e22;">:user/id</span><span style="color: #2492db;">]</span><span style="color: #2ecc71;">]</span> database<span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>

<span style="color: #34495e;">(</span><span style="color: #d98c10;">defn</span> <span style="color: #2492db;">add-user</span> <span style="color: #1abc9c;">[</span>database data<span style="color: #1abc9c;">]</span>
  <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2ecc71;">[</span>new-id <span style="color: #2492db;">(</span>+ 1 <span style="color: #9b59b6;">(</span>count <span style="color: #f1c40f;">(</span>find-all-users database<span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">)</span>
        user-tx <span style="color: #2492db;">{</span><span style="color: #e67e22;">:db/id</span> <span style="color: #9b59b6;">(</span><span style="color: #2492db;">peer</span>/tempid <span style="color: #e67e22;">:db.part/user</span><span style="color: #9b59b6;">)</span> <span style="color: #e67e22;">:user/id</span> new-id <span style="color: #e67e22;">:user/nick</span> <span style="color: #9b59b6;">(</span>get data <span style="color: #0a74b9;">"nick"</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">}</span><span style="color: #2ecc71;">]</span>
    <span style="color: #2ecc71;">(</span>println
     <span style="color: #2492db;">(</span><span style="color: #2492db;">peer</span>/transact <span style="color: #9b59b6;">(</span><span style="color: #2492db;">peer</span>/connect datomic-uri<span style="color: #9b59b6;">)</span> <span style="color: #9b59b6;">[</span>user-tx<span style="color: #9b59b6;">]</span><span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>

<span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>body <span style="color: #9b59b6;">(</span><span style="color: #2492db;">json</span>/read-str <span style="color: #f1c40f;">(</span>slurp <span style="color: #e67e22;">(</span>get-in context <span style="color: #e74c3c;">[</span><span style="color: #e67e22;">:request</span> <span style="color: #e67e22;">:body</span><span style="color: #e74c3c;">]</span><span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                         <span style="color: #2492db;">(</span>add-user <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span> body<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">{}</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
This snippet skips several iterations where I use cider's backend for
<code>eldoc-mode</code> to get a function's interface in the minibuffer or just use <code>println</code>
on an intermediary result, like the result of the call to <code>peer/transact</code> above:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-2.24.52-PM.png" alt="Transaction result." title="Transaction result."><img src="../../img/o/Screen-Shot-2014-08-31-at-2.24.52-PM-resized.png" alt="Transaction result." title="Transaction result." /></a>
</p>
</div>

<p>
The output shows me that the result is a future that I should probably wait
for. So let's skip ahead once more and try an actual implementation of GET:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>body <span style="color: #9b59b6;">(</span><span style="color: #2492db;">json</span>/read-str <span style="color: #f1c40f;">(</span>slurp <span style="color: #e67e22;">(</span>get-in context <span style="color: #e74c3c;">[</span><span style="color: #e67e22;">:request</span> <span style="color: #e67e22;">:body</span><span style="color: #e74c3c;">]</span><span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                         <span style="color: #2492db;">(</span>add-user <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span> body<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span>
               <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>database <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span>
                     entity-ids <span style="color: #9b59b6;">(</span>find-all-users database<span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                 entity-ids<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
Just returning the <code>entity-ids</code> doesn't work, we're getting 500s. Evaluating the
buffer and firing another GET request via curl will tell us that the check
against <code>multiple-representations?</code> fails and the request ends in a default
implementation of <code>handle-exception</code>:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">&lt; X-Liberator-Trace: :decision (:multiple-representations? false)
&lt; X-Liberator-Trace: :handler (:handle-ok)
&lt; X-Liberator-Trace: :handler (:handle-exception <span style="color: #0a74b9;">"(default implementation)"</span>)
</pre>
</div>

<p>
So let's override that default implementation and take a look at the exception
by printing it:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:handle-exception</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span>println <span style="color: #0a74b9;">"EX:"</span> <span style="color: #2492db;">(</span><span style="color: #e67e22;">:exception</span> context<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>body <span style="color: #9b59b6;">(</span><span style="color: #2492db;">json</span>/read-str <span style="color: #f1c40f;">(</span>slurp <span style="color: #e67e22;">(</span>get-in context <span style="color: #e74c3c;">[</span><span style="color: #e67e22;">:request</span> <span style="color: #e67e22;">:body</span><span style="color: #e74c3c;">]</span><span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                         <span style="color: #2492db;">(</span>add-user <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span> body<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span>
               <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>database <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span>
                     entity-ids <span style="color: #9b59b6;">(</span>find-all-users database<span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                 entity-ids<span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
We're getting a:
</p>

<div class="org-src-container">

<pre class="src src-fundamental">EX: #&lt;IllegalArgumentException java.lang.IllegalArgumentException: No implementation of method: :as-response of protocol: #'liberator.representation/Representation found for class: java.util.HashSet&gt;
</pre>
</div>

<p>
So there's no default implementation for serializing a HashSet to JSON. But
that's ok, we only want to return a map, which is supported out of the
box. So let's ignore that for now and built up our result:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #34495e;">(</span><span style="color: #d98c10;">defresource</span> <span style="color: #2492db;">users-resource</span>
  <span style="color: #e67e22;">:handle-exception</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span>println <span style="color: #0a74b9;">"EX:"</span> <span style="color: #2492db;">(</span><span style="color: #e67e22;">:exception</span> context<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:available-media-types</span> <span style="color: #1abc9c;">[</span><span style="color: #0a74b9;">"application/json"</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:allowed-methods</span> <span style="color: #1abc9c;">[</span><span style="color: #e67e22;">:get</span> <span style="color: #e67e22;">:post</span><span style="color: #1abc9c;">]</span>
  <span style="color: #e67e22;">:post!</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span> <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>body <span style="color: #9b59b6;">(</span><span style="color: #2492db;">json</span>/read-str <span style="color: #f1c40f;">(</span>slurp <span style="color: #e67e22;">(</span>get-in context <span style="color: #e74c3c;">[</span><span style="color: #e67e22;">:request</span> <span style="color: #e67e22;">:body</span><span style="color: #e74c3c;">]</span><span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span><span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                         <span style="color: #2492db;">(</span>add-user <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span> body<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span>
  <span style="color: #e67e22;">:handle-ok</span> <span style="color: #1abc9c;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #2ecc71;">[</span>context<span style="color: #2ecc71;">]</span>
               <span style="color: #2ecc71;">(</span><span style="color: #d98c10;">let</span> <span style="color: #2492db;">[</span>database <span style="color: #9b59b6;">(</span>read-database<span style="color: #9b59b6;">)</span>
                     entity-ids <span style="color: #9b59b6;">(</span>find-all-users database<span style="color: #9b59b6;">)</span>
                     entities <span style="color: #9b59b6;">(</span>map <span style="color: #f1c40f;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #e67e22;">[</span><span style="color: #e74c3c;">[</span>entity-id<span style="color: #e74c3c;">]</span><span style="color: #e67e22;">]</span> <span style="color: #e67e22;">(</span><span style="color: #2492db;">peer</span>/entity database entity-id<span style="color: #e67e22;">)</span><span style="color: #f1c40f;">)</span>
                                   entity-ids<span style="color: #9b59b6;">)</span>
                     users <span style="color: #9b59b6;">(</span>map <span style="color: #f1c40f;">(</span><span style="color: #d98c10;">fn</span> <span style="color: #e67e22;">[</span>entity<span style="color: #e67e22;">]</span> <span style="color: #e67e22;">{</span><span style="color: #e74c3c;">(</span><span style="color: #e67e22;">:user/id</span> entity<span style="color: #e74c3c;">)</span> <span style="color: #e74c3c;">{</span><span style="color: #e67e22;">:nick</span> <span style="color: #16a085;">(</span><span style="color: #e67e22;">:user/nick</span> entity<span style="color: #16a085;">)</span><span style="color: #e74c3c;">}</span><span style="color: #e67e22;">}</span><span style="color: #f1c40f;">)</span>
                                entities<span style="color: #9b59b6;">)</span><span style="color: #2492db;">]</span>
                 <span style="color: #2492db;">(</span>into <span style="color: #9b59b6;">{}</span> users<span style="color: #2492db;">)</span><span style="color: #2ecc71;">)</span><span style="color: #1abc9c;">)</span><span style="color: #34495e;">)</span>
</pre>
</div>

<p>
Our query against Datomic returns a vector of vectors, where each nested
vector contains just the entity (identified by the <code>?u</code> in the query). We need
to ask the database for the entity's information and then in the second <code>map</code>,
create a list of maps where a user's external ID identifies a map of the
user's attributes. In this case just the nick. Then we flatten the list into a
single map with <code>into</code> and we're done, as Midje's test runner is happy ;)
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-31-at-2.36.37-PM.png" alt="Done." title="Done."><img src="../../img/o/Screen-Shot-2014-08-31-at-2.36.37-PM-resized.png" alt="Done." title="Done." /></a>
</p>
</div>
      </div>
      </div>
      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

  <entry>
    <title>typing</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/typing.html"/>
    <id>urn:uuid:3359994b-8579-bfb4-8993-215c98420262</id>
    <updated>2014-08-09T09:57:22+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>
This post is a summary of the tools that I'm fiddling with to tweak my
keyboard layout every now and then. I recently changed from <a href="https://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard">Dvorak</a> to the
less standard <a href="http://www.workmanlayout.com/blog/">Workman Layout</a> with a bit more exotic features that led me to
look into options for implementing and customizing the layout.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">OSX</h2>
<div class="outline-text-2" id="text-1">
<p>
For my Macbook, new layouts can be added by creating a bundle in
<code>~/Library/Keyboard Layouts</code>. There is a Workman bundle with several layout
variations available at <a href="https://github.com/deekayen/workman/tree/master/mac">deekayen/workman</a>. I'm using a variation of <a href="https://github.com/deekayen/workman/tree/master/mac#workman-dead-for-programmers">Workman
Dead</a>, which trades the number of key presses against the distance
traveled. Additionally, you don't have to press a modifier key to get to the
symbols. Symbols that are usually available via the number row, are
accessible on home row after pressing the dead key. Pressing the dead key, in
my case the comma key, will remap several keys. It changes the layout from
normal Workman:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-09-at-7.45.47-AM.png" alt="workman layer." title="workman layer."><img src="../../img/o/Screen-Shot-2014-08-09-at-7.45.47-AM-resized.png" alt="workman layer." title="workman layer." /></a>
</p>
</div>

<p>
to a more symbol focused one:
</p>


<div class="figure">
<p><a href="../../img/o/Screen-Shot-2014-08-09-at-7.45.52-AM.png" alt="symbol layer." title="symbol layer."><img src="../../img/o/Screen-Shot-2014-08-09-at-7.45.52-AM-resized.png" alt="symbol layer." title="symbol layer." /></a>
</p>
</div>

<p>
For example, the key <code>{</code> is accessible by pressing
<code>,s</code> in succession, rather than <code>shift</code> + <code>[</code>, the
key <code>(</code> is <code>,h</code> rather than <code>shift</code> + <code>9</code> and so on.
</p>

<p>
The symbol layer is different from the one included in the bundle at
<a href="https://github.com/deekayen/workman/tree/master/mac">deekayen/workman</a>, more customized to my habits. For example, rather than
splitting parentheses across both hands, I moved them to the left hand. This
means that the right hand can stay on top of the dead key in case I want to
insert a pair. I also traded numbers for more symbols and added <code>~</code> close to
the dead key so that I can type <code>~/</code> conveniently in a rolling motion.
</p>

<p>
The customization is quite straight forward with <a href="http://scripts.sil.org/ukelele">Ukelele</a>. You can open the
main bundle, select the layout you want to modify and enter the symbol layer
to modify just that part of it. Ukelele then updates the file that describes
the layout (<code>*.keylayout</code> in <code>Workman.bundle/Contents/Resources</code>). Much more
convenient than editing the XML by hand :)
</p>

<p>
For some specific key remapping on my Macbook I use <a href="https://pqrs.org/osx/karabiner/">Karabiner</a> and <a href="https://pqrs.org/osx/karabiner/seil.html.en">Seil</a>, rather
than the layout. For example, capslock and return are both mapped to control
when pressed in combination with another key, otherwise to their original
meaning. The combination of Karabiner and Seil allows all sorts of
remappings. For example, in the firmware version I mapped backslash to the
capslock key, as I don't really use capslock. I use Seil to map capslock to
backslash and Karabiner to map backslash to control when pressed in
combination with another key.
</p>

<p>
You can do this for any other key combo: Identify the key's code via:
Karabiner &gt; Misc &amp; Uninstall &gt; Launch EventViewer and use Seil to map the
capslock key to that code. Then add your own configuration to Karabiner,
similar to the following:
</p>

<div class="org-src-container">

<pre class="src src-xml">&lt;?<span style="color: #d98c10;">xml</span> <span style="color: #8e44ad;">version</span>=<span style="color: #0a74b9;">"</span><span style="color: #0a74b9;">1.0</span><span style="color: #0a74b9;">"</span>?&gt;
&lt;<span style="color: #2492db;">root</span>&gt;
  &lt;<span style="color: #2492db;">item</span>&gt;
    &lt;<span style="color: #2492db;">name</span>&gt;Change backslash to left control key.&lt;/<span style="color: #2492db;">name</span>&gt;
    &lt;<span style="color: #2492db;">appendix</span>&gt;(Send an backslash key event when backslash key is pressed alone.)&lt;/<span style="color: #2492db;">appendix</span>&gt;
    &lt;<span style="color: #2492db;">identifier</span>&gt;private.backslash_to_control_escape&lt;/<span style="color: #2492db;">identifier</span>&gt;

    &lt;<span style="color: #2492db;">autogen</span>&gt;
      __KeyOverlaidModifier__
      <span style="color: #95a5a6;">&lt;!--</span><span style="color: #7f8c8d;"> from </span><span style="color: #95a5a6;">--&gt;</span>
      KeyCode::BACKSLASH,
      <span style="color: #95a5a6;">&lt;!--</span><span style="color: #7f8c8d;"> to </span><span style="color: #95a5a6;">--&gt;</span>
      KeyCode::CONTROL_L,
      <span style="color: #95a5a6;">&lt;!--</span><span style="color: #7f8c8d;"> alone </span><span style="color: #95a5a6;">--&gt;</span>
      KeyCode::BACKSLASH,
    &lt;/<span style="color: #2492db;">autogen</span>&gt;
  &lt;/<span style="color: #2492db;">item</span>&gt;
&lt;/<span style="color: #2492db;">root</span>&gt;
</pre>
</div>

<p>
The software support that OSX offers is quite convenient and switching
between layouts is fast, in case someone else needs to type. But there are
some shortcomings:
</p>

<ul class="org-ul">
<li>OSX defaults back to QWERTY when requesting an admin password or when
logging out.
</li>

<li>There are some issues with the symbol layers when using sites like
<a href="http://www.keybr.com/">keybr.com</a> or <a href="https://typing.io/">typing.io</a> for practicing. Not sure where the key presses are
lost or whether they are translated incorrectly.
</li>

<li>When pairing with other developers, I fall back to Qwerty as Workman is
still quite niche and few systems support it out of the box.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">ErgoDox</h2>
<div class="outline-text-2" id="text-2">
<p>
Hardware to the help! I bought an <a href="http://ergodox.org/">ErgoDox</a> via <a href="https://www.massdrop.com/buy/ergodox?s=ergodox">Massdrop</a> last year and this
seemed like the perfect opportunity to learn about its firmware. Compiling my
own firmware version addresses the above issues by "escaping" OSX and
allowing me to just plug in a keyboard with Workman installed. There are
multiple firmware implementations available and I just customized one to fit
my needs. This means custom placement of modifier keys and also adding the
dead key layer. I'm using Massdrop's configurator for the ErgoDox to get a
visual representation of my setup:
</p>


<div class="figure">
<p><a href="../../img/o/ergodox-layer-0.png" alt="ergodox layer 0." title="ergodox layer 0."><img src="../../img/o/ergodox-layer-0-resized.png" alt="ergodox layer 0." title="ergodox layer 0." /></a>
</p>
</div>

<p>
This is just the first layer, the next layer is for symbols and the third is
for a numpad on the right hand near home row, the full configuration is
available <a href="https://www.massdrop.com/ext/ergodox/?referer=92TGQH&amp;hash=cd06f0925f6a7563b492b5fcfb08f7a7">here</a>.
</p>

<p>
The configurator allows you to compile your own firmware version as well, but
currently there is no support for the dead key approach that I'm using. But
luckily <a href="https://github.com/benblazak/ergodox-firmware">benblazak/ergodox-firmware</a> has support for sticky keys, which you can
use to implement the dead key approach. The project is well documented and
it's quite straight-forward to compile your own version on a Mac. The only
external dependency I had to download was the compiler as part of the <a href="http://www.obdev.at/products/crosspack/download.html">AVR
MacPack</a>. Change the layout in <code>src/makefile-options</code> to your target and you're
good to go! Simply issue a <code>make</code> in the <code>src</code> sub-folder and then load the
resulting <code>firmware.hex</code> with a <a href="http://pjrc.com/teensy/loader_mac.html">Teensy Loader</a> onto your ErgoDox.
</p>

<p>
To implement a Workman Dead version, I used the existing <a href="https://github.com/benblazak/ergodox-firmware/blob/master/src/keyboard/ergodox/layout/colemak-jc-mod.c">Colemak layout</a> that
makes use of the sticky keys functionality and adapted the keys to
Workman. The layout definition is split across three function invocations,
where each one looks similar to the following:
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #d98c10;">const</span> uint8_t <span style="color: #2492db;">PROGMEM</span> <span style="color: #8e44ad;">_kb_layout</span>[KB_LAYERS][KB_ROWS][KB_COLUMNS] = {
<span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">LAYER 0</span>
KB_MATRIX_LAYER(
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">unused</span>
    0,
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">left hand</span>
    _esc,       _1, _2, _3, _4, _5, _grave,
    0,          _Q, _D, _R, _W, _B, _tab,
    _backslash, _A, _S, _H, _T, _G,
    _shiftL,    _Z, _X, _M, _C, _V, _guiL,
    0,          0,  0,  0,  _esc,
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">left thumb block</span>
         0, 0,
    0,   0, _altL,
    _bs, 2, _ctrlL,
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">right hand</span>
    _equal, _6, _7, _8, _9,      _0,         _esc,
    _dash,  _J, _F, _U, _P,      _semicolon, 0,
            _Y, _N, _E, _O,      _I,         _quote,
    _guiR,  _K, _L, 1,  _period, _slash,     _shiftR,
            _arrowU, _arrowD, _arrowL, _arrowR, 0,
    <span style="color: #95a5a6;">// </span><span style="color: #7f8c8d;">right thumb block</span>
    0,      0,
    _altR,  0,      0,
    _ctrlR, _enter, _space
),
</pre>
</div>

<p>
The above snippet is the definition for the first layer and defines the basic
Workman layout. The <code>0</code>'s indicate an unused key while the ones with an
underscore reference a given key code. For example, <code>_9</code> refers to the key code
that a regular USB keyboard emits when you press the <code>9</code> key (I'm using the
short name, the full name is more descriptive: <code>KEY_9_LeftParenthesis</code>).
</p>

<p>
To implement the symbol layer, I use the comma key as a sticky key, wish
activates a second layer (for one key press). The definition of the sticky
keys is straight-forward: You indicate the layer number on the normal layout
(the <code>1</code> in comma position and <code>2</code> on the left thumb block in the basic layout
above).
</p>

<p>
In addition to the call to <code>_kb_layout</code>, you manage the specific behavior for
press &amp; release by passing mappings to <code>_kb_layout_press</code> and
<code>_kb_layout_release</code>. These mappings are analogous to the one passed to
<code>_kb_layout</code>, but instead of key codes you add references to functions. For the
activation of the symbol layer, you add references to <code>lsticky1</code> or <code>lsticky2</code> in
the press &amp; and release mappings.
</p>

<p>
Not all symbols are accessible without modifiers on a regular keyboard, but
one goal of the dead key approach is to get rid of the modifier. For this to
work, you can supply a modifier-specific function in the press &amp; release
mapping. For example, this is just the layout for the left hand for the
symbol layer:
</p>

<div class="org-src-container">

<pre class="src src-c">0,  0,          0,          0,          0,          0,      0,
0,  _bracketR,  _bracketR,  _0,         _add_kp,    _2,     0,
0,  _bracketL,  _bracketL,  _9,         _equal_kp,  _5,
0,  _comma,     _period,    _backslash, _dash,      _dash,  0,
0,  0,          0,          0,          0,
</pre>
</div>

<p>
To produce <code>{}</code> rather than <code>[]</code> in the third column, the press &amp; release
mappings contain calls to <code>kbfun_shift_press_release</code> (aka <code>sshprre</code>) rather than
the normal <code>kbfun_press_release</code> (aka <code>kprrel</code>):
</p>

<div class="org-src-container">

<pre class="src src-c">ktrans, ktrans,     ktrans,     ktrans,     ktrans,     ktrans,     ktrans,
ktrans, kprrel,     sshprre,    sshprre,    sshprre,    sshprre,    ktrans,
ktrans, kprrel,     sshprre,    sshprre,    sshprre,    sshprre,
ktrans, sshprre,    sshprre,    sshprre,    kprrel,     sshprre,    ktrans,
ktrans, ktrans,     ktrans,     ktrans,     ktrans,
</pre>
</div>

<p>
The tedious bit is to keep the corresponding calls to <code>_kb_layout_press</code> and
<code>_kb_layout_release</code> for each layer in sync. Otherwise you might see modifier
keys that remain pressed for no apparent reason. For example, if the press &amp;
release mappings contain different function references, one to <code>kprrel</code> and the
other to <code>sshprre</code>, then the shift modifier would not get released properly.
Keeping the different invocations in sync is a bit tedious as all information
is passed in a single call where position defines the meaning of a value and
you only get arity compiler warnings. But your favorite editor might be able
to help you with that ;)
</p>

<p>
For reference my full layout is available <a href="https://github.com/fgeller/ergodox-firmware/blob/master/src/keyboard/ergodox/layout/workman-dead-mod.c">here</a>.
</p>
</div>
</div>
</div>
</content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>


  <entry>
    <title>scala pipes</title>
    <link type="text/html" href="http://www.beltmogul.me/2014/pipes.html"/>
    <id>urn:uuid:10e2b7dc-19b6-07d4-e25b-c9407399aa4c</id>
    <updated>2014-06-24T12:20:22+0000</updated>
    <summary></summary>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>
I was looking for an operator to make the following easier to read:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">hans</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Person</span>(<span style="color: #0a74b9;">"Herbert"</span>, <span style="color: #0a74b9;">"Fischer"</span>, <span style="color: #d98c10;">new</span> <span style="color: #2492db;">java</span>.util.<span style="color: #e67e22;">Date</span>(now - (<span style="color: #e67e22;">23</span> * <span style="color: #e67e22;">MilliSecondsInYear</span>)))
<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAge</span> <span style="color: #d98c10;">=</span> addAge(hans)
<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> addFullName(withAge)
</pre>
</div>

<p>
More specifically, the goal is to fill in optional fields based on initially
populated fields. In this case the mandatory fields are <code>firstName</code>, <code>lastName</code> and
<code>birthDate</code> and we derive the <code>age</code> and <code>fullName</code>:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">MilliSecondsInYear</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">1000</span> * <span style="color: #e67e22;">60</span> * <span style="color: #e67e22;">60</span> * <span style="color: #e67e22;">24</span> * <span style="color: #e67e22;">365L</span>
<span style="color: #d98c10;">def</span> <span style="color: #2492db;">now</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">System</span>.currentTimeMillis

<span style="color: #d98c10;">case</span> <span style="color: #d98c10;">class</span> <span style="color: #2492db;">Person</span>(
  firstName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">String</span>,
  lastName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">String</span>,
  birthDate<span style="color: #d98c10;">:</span> <span style="color: #2492db;">java</span>.util.<span style="color: #e67e22;">Date</span>,
  age<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Option</span>[<span style="color: #e67e22;">Long</span>] <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">None</span>,
  fullName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Option</span>[<span style="color: #e67e22;">String</span>] <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">None</span>)

<span style="color: #d98c10;">def</span> <span style="color: #2492db;">addFullName</span>(person<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span>) <span style="color: #d98c10;">=</span> person.copy(fullName <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Some</span>(s<span style="color: #0a74b9;">"${person.firstName} ${person.lastName}"</span>))
<span style="color: #d98c10;">def</span> <span style="color: #2492db;">addAge</span>(person<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span>) <span style="color: #d98c10;">=</span> person.copy(age <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Some</span>((now - person.birthDate.getTime) / <span style="color: #e67e22;">MilliSecondsInYear</span>))
</pre>
</div>

<p>
The full example I was looking at had about ten chained function
invocations. Inserting intermediate results led to redundant names as in the
example above and nesting the function invocations felt hard to read as you have
to read the expressions from the inside out:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> addFullName(addAge(hans))
</pre>
</div>

<p>
My preferred solution was imitating pipes like this:
</p>

<div class="org-src-container">

<pre class="src src-sh">ls | sort | uniq -c
</pre>
</div>

<p>
So ideally we could write:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> hans | addAge | addFullName
</pre>
</div>

<p>
But that's the bitwise OR. The alternative I've seen is the following:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> hans |&gt; addAge |&gt; addFullName
</pre>
</div>

<p>
Rather than including a library for this, we can try this ourselves. First, we
need to pimp objects with our operator:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #d98c10;">class</span> <span style="color: #2492db;">PimpAny</span>[<span style="color: #e67e22;">A</span>](any<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span>) {
  <span style="color: #d98c10;">def</span> <span style="color: #2492db;">|&gt;</span>[<span style="color: #e67e22;">B</span>](fun<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span> <span style="color: #d98c10;">&#8658;</span> <span style="color: #e67e22;">B</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">B</span> <span style="color: #d98c10;">=</span> fun(any)
}
</pre>
</div>

<p>
And add an implicit conversion to make this available:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #16a085;">implicit</span> <span style="color: #d98c10;">def</span> <span style="color: #2492db;">pimpAnyWithPipeOperator</span>[<span style="color: #e67e22;">A</span>](any<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span>) <span style="color: #d98c10;">=</span> <span style="color: #d98c10;">new</span> <span style="color: #2492db;">PimpAny</span>(any)
</pre>
</div>

<p>
We can be even more concise and combine the wrapping class and the
implicit conversion via syntactic sugar in an implicit class:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #16a085;">implicit</span> <span style="color: #d98c10;">class</span> <span style="color: #2492db;">PimpAnyWithPipeOperator</span>[<span style="color: #e67e22;">A</span>](any<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span>) {
  <span style="color: #d98c10;">def</span> <span style="color: #2492db;">|&gt;</span>[<span style="color: #e67e22;">B</span>](fun<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span> <span style="color: #d98c10;">&#8658;</span> <span style="color: #e67e22;">B</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">B</span> <span style="color: #d98c10;">=</span> fun(any)
}
</pre>
</div>

<p>
And we're done &#x2013; fun practice to learn about implicit classes. :)
</p>

<p>
Full REPL example with pipes:
</p>

<div class="org-src-container">

<pre class="src src-scala"><span style="color: #16a085;">implicit</span> <span style="color: #d98c10;">class</span> <span style="color: #2492db;">PimpAnyWithPipeOperator</span>[<span style="color: #e67e22;">A</span>](any<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span>) {
  <span style="color: #d98c10;">def</span> <span style="color: #2492db;">|&gt;</span>[<span style="color: #e67e22;">B</span>](fun<span style="color: #d98c10;">:</span> <span style="color: #2492db;">A</span> <span style="color: #d98c10;">&#8658;</span> <span style="color: #e67e22;">B</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">B</span> <span style="color: #d98c10;">=</span> fun(any)
}

<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">MilliSecondsInYear</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">1000</span> * <span style="color: #e67e22;">60</span> * <span style="color: #e67e22;">60</span> * <span style="color: #e67e22;">24</span> * <span style="color: #e67e22;">365L</span>

<span style="color: #d98c10;">case</span> <span style="color: #d98c10;">class</span> <span style="color: #2492db;">Person</span>(
  firstName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">String</span>,
  lastName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">String</span>,
  birthDate<span style="color: #d98c10;">:</span> <span style="color: #2492db;">java</span>.util.<span style="color: #e67e22;">Date</span>,
  age<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Option</span>[<span style="color: #e67e22;">Long</span>] <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">None</span>,
  fullName<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Option</span>[<span style="color: #e67e22;">String</span>] <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">None</span>)

<span style="color: #d98c10;">def</span> <span style="color: #2492db;">now</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">System</span>.currentTimeMillis

<span style="color: #d98c10;">def</span> <span style="color: #2492db;">addFullName</span>(person<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span> <span style="color: #d98c10;">=</span>
  person.copy(fullName <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Some</span>(s<span style="color: #0a74b9;">"${person.firstName} ${person.lastName}"</span>))

<span style="color: #d98c10;">def</span> <span style="color: #2492db;">addAge</span>(person<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span>)<span style="color: #d98c10;">:</span> <span style="color: #2492db;">Person</span> <span style="color: #d98c10;">=</span>
  person.copy(age <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Some</span>((now - person.birthDate.getTime) / <span style="color: #e67e22;">MilliSecondsInYear</span>))

<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">hans</span> <span style="color: #d98c10;">=</span> <span style="color: #e67e22;">Person</span>(<span style="color: #0a74b9;">"Herbert"</span>, <span style="color: #0a74b9;">"Fischer"</span>, <span style="color: #d98c10;">new</span> <span style="color: #2492db;">java</span>.util.<span style="color: #e67e22;">Date</span>(now - (<span style="color: #e67e22;">23</span> * <span style="color: #e67e22;">MilliSecondsInYear</span>)))
<span style="color: #d98c10;">val</span> <span style="color: #8e44ad;">withAgeAndFullName</span> <span style="color: #d98c10;">=</span> hans |&gt; addAge |&gt; addFullName
</pre>
</div>

      </div>
    </content>
    <author>
      <name>Felix Geller</name>
    </author>
  </entry>

</feed>
